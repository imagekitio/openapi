openapi: 3.1.0
info:
  title: ImageKit API
  version: 1.0.0
  description: |-
    Checkout [API overview](/docs/api-overview) to learn about ImageKit's APIs, authentication, rate limits, and error codes etc.
  contact:
    email: developers@imagekit.io
    name: ImageKit Team
    url: https://imagekit.io
  termsOfService: 'https://imagekit.io/terms/'
servers:
  - url: https://api.imagekit.io
paths:
  /v1/customMetadataFields:
    post:
      summary: Create new field
      operationId: create-new-field
      description: |
        This API creates a new custom metadata field. Once a custom metadata field is created either through this API or using the dashboard UI, its value can be set on the assets. The value of a field for an asset can be set using the media library UI or programmatically through upload or update assets API.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - label
                - schema
              properties:
                name:
                  type: string
                  description: API name of the custom metadata field. This should be unique across all (including deleted) custom metadata fields.
                label:
                  type: string
                  description: Human readable name of the custom metadata field. This should be unique across all non deleted custom metadata fields. This name is displayed as form field label to the users while setting field value on an asset in the media library UI.
                schema:
                  type: object
                  required:
                    - type
                  properties:
                    type:
                      description: Type of the custom metadata field.
                      type: string
                      enum:
                        - Text
                        - TextArea
                        - Number
                        - Date
                        - Boolean
                        - SingleSelect
                        - MultiSelect
                    selectOptions:
                      type: array
                      items: {}
                      description: |
                        An array of allowed values. This property is only required if `type` property is set to `SingleSelect` or `MultiSelect`.
                      example:
                        - small
                        - medium
                        - large
                        - 30
                        - 40
                        - true
                    defaultValue:
                      description: |
                        The default value for this custom metadata field. This property is only required if `isValueRequired` property is set to `true`. The value should match the `type` of custom metadata field.
                      oneOf:
                        - type: string
                        - type: number
                        - type: boolean
                        - type: array
                          items: {}
                          description: |
                            Default value should be of type array when custom metadata field type is set to `MultiSelect`.
                          example:
                            - true
                            - 10
                            - Hello
                    isValueRequired:
                      type: boolean
                      description: |
                        Sets this custom metadata field as required. Setting custom metadata fields on an asset will throw error if the value for all required fields are not present in upload or update asset API request body.
                    minValue:
                      description: |
                        Minimum value of the field. Only set this property if `type` is set to `Date` or `Number`.
                      oneOf:
                        - type: string
                          description: Set the minimum date in ISO8601 string format.
                        - type: number
                          description: Set the minimum numeric value.
                    maxValue:
                      description: |
                        Maximum value of the field. Only set this property if `type` is set to `Date` or `Number`.
                      oneOf:
                        - type: string
                          description: Set the maximum date in ISO8601 string format.
                        - type: number
                          description: Set the maximum numeric value.
                    minLength:
                      description: |
                        Minimum length of string. Only set this property if `type` is set to `Text` or `Textarea`.
                      type: number
                    maxLength:
                      description: |
                        Maximum length of string. Only set this property if `type` is set to `Text` or `Textarea`.
                      type: number
            example:
              name: price
              label: price
              schema:
                type: Number
                minValue: 1000
                maxValue: 3000
      responses:
        "429":
          $ref: '#/components/responses/RateLimitExceeded'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "201":
          description: Custom metadata field created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomMetadataField"
              example:
                id: 598821f949c0a938d57563dd
                name: price
                label: price
                schema:
                  type: Number
                  minValue: 1000
                  maxValue: 3000
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Human readable error message.
                    example: A custom metadata field with this name already exists
                  help:
                    type: string
                    description: Human readable help instructions.
                    example: For support kindly contact us at support@imagekit.io.
      tags:
        - Digital Asset Management (DAM)
        - Custom metadata fields
    get:
      tags:
        - Digital Asset Management (DAM)
        - Custom metadata fields
      operationId: list-all-fields
      summary: List all fields
      description: This API returns the array of created custom metadata field objects. By default the API returns only non deleted field objects, but you can include deleted fields in the API response.
      parameters:
        - description: |
            Set it to `true` to include deleted field objects in the API response. Default value is `false`.
          in: query
          name: includeDeleted
          required: false
          schema:
            type: boolean
      responses:
        "429":
          $ref: '#/components/responses/RateLimitExceeded'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "200":
          description: Array of custom metadata field objects.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CustomMetadataField"
              example:
                - id: 598821f949c0a938d57563dd
                  name: brand
                  label: brand
                  schema:
                    type: Text
                    defaultValue: Nike
                - id: 865421f949c0a835d57563dd
                  name: price
                  label: price
                  schema:
                    type: Number
                    minValue: 1000
                    maxValue: 3000
        
  /v1/files/{fileId}/details:
    get:
      tags:
        - Digital Asset Management (DAM)
        - Managing assets
      operationId: get-file-details
      summary: Get file details
      description: This API returns an object with details or attributes about the current version of the file.
      parameters:
        - description: |
            The unique `fileId` of the uploaded file. `fileId` is returned in the list and search assets API and upload API.
          in: path
          name: fileId
          required: true
          schema:
            type: string
      responses:
        "429":
          $ref: '#/components/responses/RateLimitExceeded'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "200":
          description: File details object.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileDetails"
              example:
                fileId: 598821f949c0a938d57563bd
                type: file
                name: file.jpg
                filePath: /images/products/file.jpg
                tags:
                  - t-shirt
                  - round-neck
                  - sale2019
                AITags:
                  - name: Shirt
                    confidence: 90.12
                    source: google-auto-tagging
                  - name: T-shirt
                    confidence: 80.12
                    source: aws-auto-tagging
                versionInfo:
                  id: 598821f949c0a938d57563bd
                  name: Version 1
                isPrivateFile: false
                customCoordinates: null
                url: https://ik.imagekit.io/your_imagekit_id/images/products/file.jpg
                thumbnail: https://ik.imagekit.io/your_imagekit_id/tr:n-ik_ml_thumbnail/images/products/file.jpg
                fileType: image
                mime: image/jpeg
                width: 100
                height: 100
                size: 100
                hasAlpha: false
                customMetadata:
                  brand: Nike
                  color: red
                createdAt: "2019-08-24T06:14:41.313Z"
                updatedAt: "2019-08-24T06:14:41.313Z"
        
        "404":
          description: File not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: The requested file does not exist.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io.
    patch:
      tags:
        - Digital Asset Management (DAM)
        - Managing assets
      operationId: update-file-details
      summary: Update file details
      description: |
        This API updates the details or attributes of the current version of the file. You can update `tags`, `customCoordinates`, `customMetadata`, remove existing `AITags` and apply extensions using this API.
      parameters:
        - description: |
            The unique `fileId` of the uploaded file. `fileId` is returned in list and search assets API and upload API.
          in: path
          name: fileId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                removeAITags:
                  oneOf:
                    - type: array
                      items:
                        type: string
                    - type: string
                      enum: ["all"]
                  description: |
                    An array of AITags associated with the file that you want to remove, e.g. `["car", "vehicle", "motorsports"]`. 
                    
                    If you want to remove all AITags associated with the file, send a string - "all".

                    Note: The remove operation for `AITags` executes before any of the `extensions` are processed.
                webhookUrl:
                  type: string
                  description: |
                    The final status of pending extensions will be sent to this URL.
                extensions:
                  type: array
                  items:
                    anyOf:
                      - $ref: '#/components/schemas/RemovedotBGExtensionRequest'
                      - $ref: '#/components/schemas/AutoTaggingExtensionRequest'
                  description: >
                    Array of extensions to be applied to the asset. Each extension can be configured with specific parameters based on the extension type.
                tags:
                  type: array
                  items:
                    type: string
                  description: >
                    An array of tags associated with the file, such as `["tag1", "tag2"]`. Send `null` to unset all tags associated with the file.
                  nullable: true
                  example: ["tag1", "tag2"]
                  x-nullable-description: >
                    Send `null` to unset all tags associated with the file.
                customCoordinates:
                  type: string
                  nullable: true
                  description: |
                    Define an important area in the image in the format `x,y,width,height` e.g. `10,10,100,100`. Send `null` to unset this value.
                  x-nullable-description: >
                    Send `null` to unset this value.
                customMetadata:
                  type: object
                  description: |
                    A key-value data to be associated with the asset. To unset a key, send `null` value for that key. Before setting any custom metadata on an asset you have to create the field using custom metadata fields API.
            example:
              removeAITags: ["car", "vehicle", "motorsports"]
              webhookUrl: https://webhook.site/0d6b6c7a-8e5a-4b3a-8b7c-0d6b6c7a8e5a
              extensions:
                [
                  { "name": "remove-bg", "options": { "add_shadow": true } },
                  {
                    "name": "google-auto-tagging",
                    "minConfidence": 80,
                    "maxTags": 10,
                  },
                  {
                    "name": "aws-auto-tagging",
                    "minConfidence": 80,
                    "maxTags": 10,
                  },
                ]
              tags: ["tag1", "tag2"]
              customCoordinates: "10,10,100,100"
              customMetadata: { "brand": "Nike", "color": "red" }
      responses:
        "429":
          $ref: '#/components/responses/RateLimitExceeded'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "200":
          description: Updated file details object.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/FileDetails"
                  - type: object
                    properties:
                      extensionStatus:
                        type: object
                        properties:
                          google-auto-tagging:
                            type: string
                            enum: ["success", "pending", "failed"]
                          aws-auto-tagging:
                            type: string
                            enum: ["success", "pending", "failed"]
                          remove-bg:
                            type: string
                            enum: ["success", "pending", "failed"]
              example:
                fileId: 598821f949c0a938d57563bd
                type: file
                name: file1.jpg
                filePath: /images/products/file.jpg
                tags:
                  - t-shirt
                  - round-neck
                  - sale2019
                AITags:
                  - name: Shirt
                    confidence: 90.12
                    source: google-auto-tagging
                  - name: T-shirt
                    confidence: 80.12
                    source: aws-auto-tagging
                versionInfo:
                  id: 598821f949c0a938d57563bd
                  name: Version 1
                isPrivateFile: false
                customCoordinates: null
                url: https://ik.imagekit.io/your_imagekit_id/images/products/file.jpg
                thumbnail: https://ik.imagekit.io/your_imagekit_id/tr:n-ik_ml_thumbnail/images/products/file.jpg
                fileType: image
                mime: image/jpeg
                width: 100
                height: 100
                size: 100
                hasAlpha: false
                customMetadata:
                  brand: Nike
                  color: red
                createdAt: "2019-08-24T06:14:41.313Z"
                updatedAt: "2019-08-24T06:14:41.313Z"
                extensionStatus:
                  google-auto-tagging: "success"
                  remove-bg: "pending"
        "404":
          description: File not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: The requested file does not exist.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io.
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid custom metadata.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io.
                  errors:
                    type: object
  /v1/customMetadataFields/{id}:
    patch:
      tags:
        - Digital Asset Management (DAM)
        - Custom metadata fields
      operationId: update-existing-field
      summary: Update existing field
      description: |
        This API updates the label or schema of an existing custom metadata field.
      parameters:
        - description: |
            Should be a valid custom metadata field id.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                label:
                  type: string
                  description: Human readable name of the custom metadata field. This should be unique across all non deleted custom metadata fields. This name is displayed as form field label to the users while setting field value on an asset in the media library UI. This parameter is required if `schema` is not provided.
                schema:
                  type: object
                  description: |
                    An object that describes the rules for the custom metadata key. This parameter is required if `label` is not provided. Note: `type` cannot be updated and will be ignored if sent with the `schema`. The schema will be validated as per the existing `type`.
                  properties:
                    selectOptions:
                      type: array
                      items: {}
                      description: |
                        An array of allowed values. This property is only required if `type` property is set to `SingleSelect` or `MultiSelect`.
                      example:
                        - small
                        - medium
                        - large
                        - 30
                        - 40
                        - true
                    defaultValue:
                      description: |
                        The default value for this custom metadata field. This property is only required if `isValueRequired` property is set to `true`. The value should match the `type` of custom metadata field.
                      oneOf:
                        - type: string
                        - type: number
                        - type: boolean
                        - type: array
                          items: {}
                          description: |
                            Default value should be of type array when custom metadata field type is set to `MultiSelect`.
                          example:
                            - true
                            - 10
                            - Hello
                    isValueRequired:
                      type: boolean
                      description: |
                        Sets this custom metadata field as required. Setting custom metadata fields on an asset will throw error if the value for all required fields are not present in upload or update asset API request body.
                    minValue:
                      description: |
                        Minimum value of the field. Only set this property if `type` is set to `Date` or `Number`.
                      oneOf:
                        - type: string
                          description: Set the minimum date in ISO8601 string format.
                        - type: number
                          description: Set the minimum numeric value.
                    maxValue:
                      description: |
                        Maximum value of the field. Only set this property if `type` is set to `Date` or `Number`.
                      oneOf:
                        - type: string
                          description: Set the maximum date in ISO8601 string format.
                        - type: number
                          description: Set the maximum numeric value.
                    minLength:
                      description: |
                        Minimum length of string. Only set this property if `type` is set to `Text` or `Textarea`.
                      type: number
                    maxLength:
                      description: |
                        Maximum length of string. Only set this property if `type` is set to `Text` or `Textarea`.
                      type: number
            example:
              label: price
              schema:
                type: Number
                minValue: 1000
                maxValue: 3000
      responses:
        "429":
          $ref: '#/components/responses/RateLimitExceeded'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "200":
          description: Custom metadata field updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomMetadataField"
              example:
                id: 598821f949c0a938d57563dd
                name: price
                label: price
                schema:
                  type: Number
                  minValue: 1000
                  maxValue: 3000
    delete:
      tags:
        - Digital Asset Management (DAM)
        - Custom metadata fields
      operationId: delete-a-field
      summary: Delete a field
      description: |
        This API deletes a custom metadata field. Even after deleting a custom metadata field, you cannot create any new custom metadata field with the same name.
      parameters:
        - description: |
            Should be a valid custom metadata field id.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "429":
          $ref: '#/components/responses/RateLimitExceeded'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "204":
          description: Custom metadata field deleted successfully.
          content:
            application/json:
              schema:
                type: object
  /v1/files:
    get:
      tags:
        - Digital Asset Management (DAM)
      operationId: list-and-search-assets
      summary: List and search assets
      description: |
        This API can list all the uploaded files and folders in your ImageKit.io media library. In addition, you can fine-tune your query by specifying various filters by generating a query string in a Lucene-like syntax and provide this generated string as the value of the `searchQuery`.
      parameters:
        - in: query
          name: type
          required: false
          description: |
            Limit search to one of `file`, `file-version`, or `folder`. Pass `all` to include `files` and `folders` in search results (`file-version` will not be included in this case).

            Default value - `file`
          schema:
            type: string
            enum:
              - file
              - file-version
              - folder
              - all
        - in: query
          name: sort
          required: false
          description: |
            You can sort based on the following fields:

            1. name - `ASC_NAME` or `DESC_NAME`
            2. createdAt - `ASC_CREATED` or `DESC_CREATED`
            3. updatedAt - `ASC_UPDATED` or `DESC_UPDATED`
            4. height - `ASC_HEIGHT` or `DESC_HEIGHT`
            5. width - `ASC_WIDTH` or `DESC_WIDTH`
            6. size - `ASC_SIZE` or `DESC_SIZE`

            Default value - `ASC_CREATED`
          schema:
            type: string
        - in: query
          name: path
          required: false
          description: |
            Folder path if you want to limit the search within a specific folder. For example, `/sales-banner/` will only search in folder sales-banner.
          schema:
            type: string
        - in: query
          name: searchQuery
          required: false
          description: |
            Query string in a Lucene-like query language. Learn more about the query expression later in this section.

            Note : When the searchQuery parameter is present, the following query parameters will have no effect on the result:
            1. `tags`
            2. `type`
            3. `name`
          schema:
            type: string
        - in: query
          name: fileType
          required: false
          description: |
            Type of files to include in the result set. Accepts three values:

            `all` - include all types of files in the result set.
            `image` - only search in image type files.
            `non-image` - only search in files that are not images, e.g., JS or CSS or video files.

            Default value - `all`
          schema:
            type: string
        - in: query
          name: limit
          required: false
          description: |
            The maximum number of results to return in response:

            Minimum value - 1

            Maximum value - 1000

            Default value - 1000
          schema:
            type: string
        - in: query
          name: skip
          required: false
          description: |
            The number of results to skip before returning results:

            Minimum value - 0

            Default value - 0
          schema:
            type: string
      responses:
        "429":
          $ref: '#/components/responses/RateLimitExceeded'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "200":
          description: List of assets.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FileDetails"
              example:
                - fileId: 598821f949c0a938d57563bd
                  type: file
                  name: file.jpg
                  filePath: /images/products/file.jpg
                  tags:
                    - t-shirt
                    - round-neck
                    - sale2019
                  AITags:
                    - name: Shirt
                      confidence: 90.12
                      source: google-auto-tagging
                    - name: T-shirt
                      confidence: 80.12
                      source: aws-auto-tagging
                  versionInfo:
                    id: 598821f949c0a938d57563bd
                    name: Version 2
                  isPrivateFile: false
                  customCoordinates: null
                  url: https://ik.imagekit.io/your_imagekit_id/images/products/file.jpg
                  thumbnail: https://ik.imagekit.io/your_imagekit_id/tr:n-ik_ml_thumbnail/images/products/file.jpg
                  fileType: image
                  mime: image/jpeg
                  width: 100
                  height: 100
                  size: 100
                  hasAlpha: false
                  customMetadata:
                    brand: Nike
                    color: red
                  createdAt: "2019-08-24T06:14:41.313Z"
                  updatedAt: "2019-08-24T06:14:41.313Z"
                - fileId: 598821f949c0a938d81963bd
                  type: file-version
                  name: file.jpg
                  filePath: /images/products/file.jpg
                  tags:
                    - t-shirt
                    - sale2019
                  AITags:
                    - name: Shirt
                      confidence: 90.12
                      source: google-auto-tagging
                    - name: T-shirt
                      confidence: 80.12
                      source: aws-auto-tagging
                  versionInfo:
                    id: 598821f949c0a938d57563bd
                    name: Version 1
                  isPrivateFile: false
                  customCoordinates: null
                  url: https://ik.imagekit.io/your_imagekit_id/images/products/file.jpg?ik-obj-version=iAg8gxkqo_QUBwqNeQrJzuyce2XB7Gc4
                  thumbnail: https://ik.imagekit.io/your_imagekit_id/tr:n-ik_ml_thumbnail/images/products/file.jpg?ik-obj-version=iAg8gxkqo_QUBwqNeQrJzuyce2XB7Gc4
                  fileType: image
                  mime: image/jpeg
                  width: 100
                  height: 100
                  size: 100
                  hasAlpha: false
                  customMetadata:
                    brand: Nike
                    color: red
                  createdAt: "2019-08-24T06:15:41.313Z"
                  updatedAt: "2019-08-24T06:15:41.313Z"
                - folderId: 6441fce4e809dd54b0dee029
                  type: folder
                  name: summer
                  createdAt: "2023-04-21T03:03:00.869Z"
                  updatedAt: "2023-04-21T03:10:22.374Z"
                  folderPath: "/sale"
        
  /v1/files/{fileId}:
    delete:
      tags:
        - Digital Asset Management (DAM)
        - Managing assets
      operationId: delete-file
      summary: Delete file
      description: |
        This API deletes the file and all its file versions permanently.

        Note: If a file or specific transformation has been requested in the past, then the response is cached. Deleting a file does not purge the cache. You can purge the cache using purge cache API.
      parameters:
        - description: |
            The unique `fileId` of the uploaded file. `fileId` is returned in list and search assets API and upload API.
          in: path
          name: fileId
          required: true
          schema:
            type: string
      responses:
        "429":
          $ref: '#/components/responses/RateLimitExceeded'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "204":
          description: File deleted successfully.
        "404":
          description: File not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: The requested file does not exist.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io.
  /v1/files/batch/deleteByFileIds:
    post:
      tags:
        - Digital Asset Management (DAM)
        - Managing assets
      operationId: delete-multiple
      summary: Delete multiple
      description: |
        This API deletes multiple files and all their file versions permanently.

        Note: If a file or specific transformation has been requested in the past, then the response is cached. Deleting a file does not purge the cache. You can purge the cache using purge cache API.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - fileIds
              properties:
                fileIds:
                  type: array
                  items:
                    type: string
                  description: |
                    An array of fileIds which you want to delete.
            example:
              fileIds:
                - 598821f949c0a938d57563bd
                - 598821f949c0a938d57563be
      responses:
        "429":
          $ref: '#/components/responses/RateLimitExceeded'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "200":
          description: Files deleted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  successfullyDeletedFileIds:
                    type: array
                    items:
                      type: string
                    description: |
                      An array of fileIds that were successfully deleted.
        "207":
          description: Partially successful. Some files were not deleted.
          content:
            application/json:
              schema:
                type: object
                properties:
                  successfullyDeletedFileIds:
                    type: array
                    items:
                      type: string
                    description: |
                      An array of fileIds that were successfully deleted.
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        fileId:
                          type: string
                          description: Unique identifier of the file that was not deleted.
                        error:
                          type: string
                          description: |
                            Error message for the file that was not deleted.
                    description: |
                      An array of fileIds that were not deleted and the error.
        
        "404":
          description: File not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: The requested file(s) does not exist.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io.
                  missingFileIds:
                    type: array
                    items:
                      type: string
                    description: |
                      An array of fileIds that were not found.
  /v1/files/copy:
    post:
      tags:
        - Digital Asset Management (DAM)
        - Managing assets
      operationId: copy-file
      summary: Copy file
      description: |
        This will copy a file from one folder to another. 

        Note: If any file at the destination has the same name as the source file, then the source file and its versions (if `includeFileVersions` is set to true) will be appended to the destination file version history.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - sourceFilePath
                - destinationPath
              properties:
                sourceFilePath:
                  type: string
                  description: |
                    The full path of the file you want to copy.
                  example: /path/to/file.jpg
                destinationPath:
                  type: string
                  description: |
                    Full path to the folder you want to copy the above file into.
                  example: /folder/to/copy/into/
                includeFileVersions:
                  type: boolean
                  description: |
                    Option to copy all versions of a file. By default, only the current version of the file is copied. When set to true, all versions of the file will be copied. Default value - `false`.
                  example: false
      responses:
        "429":
          $ref: '#/components/responses/RateLimitExceeded'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "204":
          description: File copied successfully.
          content:
            application/json:
              schema:
                type: object
        "404":
          description: File not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  reason:
                    type: string
                    example: SOURCE_FILE_MISSING
                  message:
                    type: string
                    example: No file found with filePath `/file1.jpg`.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io.
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Your request is missing parameters / contains invalid parameters.
                  reason:
                    type: string
                    examples:
                      - MISSING_PARAMETER
                      - SAME_SOURCE_AND_DESTINATION
                      - VERSION_LIMIT_EXCEEDED
                      - INVALID_FOLDER_PATH
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io.
  /v1/files/move:
    post:
      tags:
        - Digital Asset Management (DAM)
        - Managing assets
      operationId: move-file
      summary: Move file
      description: |
        This will move a file and all its versions from one folder to another. 

        Note: If any file at the destination has the same name as the source file, then the source file and its versions will be appended to the destination file.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - sourceFilePath
                - destinationPath
              properties:
                sourceFilePath:
                  type: string
                  description: |
                    The full path of the file you want to move.
                  example: /path/to/file.jpg
                destinationPath:
                  type: string
                  description: |
                    Full path to the folder you want to move the above file into.
                  example: /folder/to/move/into/
      responses:
        "429":
          $ref: '#/components/responses/RateLimitExceeded'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "204":
          description: File moved successfully.
          content:
            application/json:
              schema:
                type: object
        "404":
          description: File not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  reason:
                    type: string
                    example: SOURCE_FILE_MISSING
                  message:
                    type: string
                    example: No file found with filePath `/file1.jpg`.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io.
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Your request is missing parameters / contains invalid parameters.
                  reason:
                    type: string
                    examples:
                      - MISSING_PARAMETER
                      - SAME_SOURCE_AND_DESTINATION
                      - VERSION_LIMIT_EXCEEDED
                      - INVALID_FOLDER_PATH
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io.
  /v1/files/rename:
    put:
      tags:
        - Digital Asset Management (DAM)
        - Managing assets
      operationId: rename-file
      summary: Rename file
      description: |
        You can rename an already existing file in the media library using rename file API. This operation would rename all file versions of the file. 

        Note: The old URLs will stop working. The file/file version URLs cached on CDN will continue to work unless a purge is requested.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - filePath
                - newFileName
              properties:
                filePath:
                  type: string
                  description: |
                    The full path of the file you want to rename.
                  example: /path/to/file.jpg
                newFileName:
                  type: string
                  description: |
                    The new name of the file. A filename can contain:

                    Alphanumeric Characters: `a-z`, `A-Z`, `0-9` (including Unicode letters, marks, and numerals in other languages).
                    Special Characters: `.`, `_`, and `-`.

                    Any other character, including space, will be replaced by `_`.
                  example: newFileName.jpg
                purgeCache:
                  type: boolean
                  description: |
                    Option to purge cache for the old file URL.

                    When set to true, it will internally issue a purge cache request on CDN to remove cached content on the old URL. E.g. if an old file was accessible at - `https://ik.imagekit.io/demo/old-filename.jpg`, a purge cache request will be issued to remove the CDN cache for this URL. This purge request is counted against your monthly purge quota. 

                    Note: Cache will be purged only for the current version of file.

                    Default value - `false`
                  example: true
      responses:
        "429":
          $ref: '#/components/responses/RateLimitExceeded'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "200":
          description: On success, you will receive `purgeRequestId` in the response body, which can be used to get the purge request status. This is only sent if the `purgeCache` is set to `true` in the request. Otherwise, the response is an empty JSON.
          content:
            application/json:
              schema:
                type: object
                properties:
                  purgeRequestId:
                    type: string
                    description: |
                      Unique identifier of the purge request. This can be used to check the status of the purge request.
        "207":
          description: In case purgeCache is set to true and total purge request count has exceeded the quota, we will rename the file but won't purge CDN cache.
          content:
            application/json:
              schema:
                type: object
                properties:
                  reason:
                    type: string
                    example: PURGE_FAILED
                  message:
                    type: string
                    example: File renamed successfully but we could not purge the CDN cache for old URL because of rate limits on purge API.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io.
        
        "404":
          description: If no file is found at the specified filePath in the media library, then a 404 response is returned.
          content:
            application/json:
              schema:
                type: object
                properties:
                  reason:
                    type: string
                    example: FILE_MISSING
                  message:
                    type: string
                    example: No file found in media library at filePath /path/to/file.jpg
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io.
        "409":
          description: If a file with newFileName already exist in the same location.
          content:
            application/json:
              schema:
                type: object
                properties:
                  reason:
                    type: string
                    example: FILE_ALREADY_EXISTS
                  message:
                    type: string
                    example: File with name newFileName already exists at the same location.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io.
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  reason:
                    type: string
                    examples:
                      - MISSING_PARAMETER
                      - INVALID_PARAMETER
                      - SAME_OLD_AND_NEW_NAME
                  message:
                    type: string
                    example: newFileName cannot be the same as its existing name.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io.
  /v1/files/{fileId}/versions:
    get:
      tags:
        - Digital Asset Management (DAM)
        - Managing assets
      operationId: list-file-versions
      summary: List file versions
      description: |
        This API returns details of all versions of a file.
      parameters:
        - description: |
            The unique `fileId` of the uploaded file. `fileId` is returned in list and search assets API and upload API.
          in: path
          name: fileId
          required: true
          schema:
            type: string
      responses:
        "429":
          $ref: '#/components/responses/RateLimitExceeded'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "200":
          description: Array of file version objects.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FileDetails"
                  example:
                    - fileId: 598821f949c0a938d57563bd
                      type: file
                      name: file.jpg
                      filePath: /images/products/file.jpg
                      tags:
                        - t-shirt
                        - round-neck
                        - sale2019
                      AITags:
                        - name: Shirt
                          confidence: 90.12
                          source: google-auto-tagging
                        - name: T-shirt
                          confidence: 80.12
                          source: aws-auto-tagging
                      versionInfo:
                        id: 598821f949c0a938d57563bd
                        name: Version 2
                      isPrivateFile: false
                      customCoordinates: null
                      url: https://ik.imagekit.io/your_imagekit_id/images/products/file.jpg
                      thumbnail: https://ik.imagekit.io/your_imagekit_id/tr:n-ik_ml_thumbnail/images/products/file.jpg
                      fileType: image
                      mime: image/jpeg
                      width: 100
                      height: 100
                      size: 100
                      hasAlpha: false
                      customMetadata:
                        brand: Nike
                        color: red
                      createdAt: "2019-08-24T06:14:41.313Z"
                      updatedAt: "2019-08-24T06:14:41.313Z"
                    - fileId: 598821f949c0a938d81963bd
                      type: file-version
                      name: file.jpg
                      filePath: /images/products/file.jpg
                      tags:
                        - t-shirt
                        - sale2019
                      AITags:
                        - name: Shirt
                          confidence: 90.12
                          source: google-auto-tagging
                        - name: T-shirt
                          confidence: 80.12
                          source: aws-auto-tagging
                      versionInfo:
                        id: 598821f949c0a938d57563bd
                        name: Version 1
                      isPrivateFile: false
                      customCoordinates: null
                      url: https://ik.imagekit.io/your_imagekit_id/images/products/file.jpg?ik-obj-version=iAg8gxkqo_QUBwqNeQrJzuyce2XB7Gc4
                      thumbnail: https://ik.imagekit.io/your_imagekit_id/tr:n-ik_ml_thumbnail/images/products/file.jpg?ik-obj-version=iAg8gxkqo_QUBwqNeQrJzuyce2XB7Gc4
                      fileType: image
                      mime: image/jpeg
                      width: 100
                      height: 100
                      size: 100
                      hasAlpha: false
                      customMetadata:
                        brand: Nike
                        color: red
                      createdAt: "2019-08-24T06:15:41.313Z"
                      updatedAt: "2019-08-24T06:15:41.313Z" 
        "404":
          description: File not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: The requested file does not exist.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io.
  /v1/files/{fileId}/versions/{versionId}:
    get:
      tags:
        - Digital Asset Management (DAM)
        - Managing assets
      operationId: get-file-version-details
      summary: Get file version details
      description: This API returns an object with details or attributes of a file version.
      parameters:
        - description: |
            The unique `fileId` of the uploaded file. `fileId` is returned in list and search assets API and upload API.
          in: path
          name: fileId
          required: true
          schema:
            type: string
        - description: |
            The unique `versionId` of the uploaded file. `versionId` is returned in list and search assets API and upload API.
          in: path
          name: versionId
          required: true
          schema:
            type: string
      responses:
        "429":
          $ref: '#/components/responses/RateLimitExceeded'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "200":
          description: File version details object.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileDetails"
              example:
                fileId: 598821f949c0a938d81963bd
                type: file-version
                name: file.jpg
                filePath: /images/products/file.jpg
                tags:
                  - t-shirt
                  - sale2019
                AITags:
                  - name: Shirt
                    confidence: 90.12
                    source: google-auto-tagging
                  - name: T-shirt
                    confidence: 80.12
                    source: aws-auto-tagging
                versionInfo:
                  id: 598821f949c0a938d57563bd
                  name: Version 1
                isPrivateFile: false
                customCoordinates: null
                url: https://ik.imagekit.io/your_imagekit_id/images/products/file.jpg?ik-obj-version=iAg8gxkqo_QUBwqNeQrJzuyce2XB7Gc4
                thumbnail: https://ik.imagekit.io/your_imagekit_id/tr:n-ik_ml_thumbnail/images/products/file.jpg?ik-obj-version=iAg8gxkqo_QUBwqNeQrJzuyce2XB7Gc4
                fileType: image
                mime: image/jpeg
                width: 100
                height: 100
                size: 100
                hasAlpha: false
                customMetadata:
                  brand: Nike
                  color: red
                createdAt: "2019-08-24T06:15:41.313Z"
                updatedAt: "2019-08-24T06:15:41.313Z"        
        "404":
          description: File version not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: The requested file version does not exist.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io.
    delete:
      tags:
        - Digital Asset Management (DAM)
        - Managing assets
      operationId: delete-file-version
      summary: Delete file version
      description: |
        This API deletes a non-current file version permanently. The API returns an empty response.

        Note: If you want to delete all versions of a file, use the delete file API.
      parameters:
        - description: |
            The unique `fileId` of the uploaded file. `fileId` is returned in list and search assets API and upload API.
          in: path
          name: fileId
          required: true
          schema:
            type: string
        - description: |
            The unique `versionId` of the uploaded file. `versionId` is returned in list and search assets API and upload API.
          in: path
          name: versionId
          required: true
          schema:
            type: string
      responses:
        "429":
          $ref: '#/components/responses/RateLimitExceeded'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "204":
          description: File version deleted successfully.
          content:
            application/json:
              schema:
                type: object
        "400":
          description: Trying to delete the current version of the file.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: You cannot delete current version of a file.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io.
        "404":
          description: File version found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: The requested asset does not exist.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io.
  /v1/files/{fileId}/versions/{versionId}/restore:
    put:
      tags:
        - Digital Asset Management (DAM)
        - Managing assets
      operationId: restore-file-version
      summary: Restore file version
      description: |
        This API restores a file version as the current file version.
      parameters:
        - description: |
            The unique `fileId` of the uploaded file. `fileId` is returned in list and search assets API and upload API.
          in: path
          name: fileId
          required: true
          schema:
            type: string
        - description: |
            The unique `versionId` of the uploaded file. `versionId` is returned in list and search assets API and upload API.
          in: path
          name: versionId
          required: true
          schema:
            type: string
      responses:
        "429":
          $ref: '#/components/responses/RateLimitExceeded'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "200":
          description: Restored file details object.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileDetails"
                example:
                  fileId: 598821f949c0a938d57563bd
                  type: file
                  name: file.jpg
                  filePath: /images/products/file.jpg
                  tags:
                    - t-shirt
                    - round-neck
                    - sale2019
                  AITags:
                    - name: Shirt
                      confidence: 90.12
                      source: google-auto-tagging
                    - name: T-shirt
                      confidence: 80.12
                      source: aws-auto-tagging
                  versionInfo:
                    id: 598821f949c0a938d57563bd
                    name: Version 2
                  isPrivateFile: false
                  customCoordinates: null
                  url: https://ik.imagekit.io/your_imagekit_id/images/products/file.jpg
                  thumbnail: https://ik.imagekit.io/your_imagekit_id/tr:n-ik_ml_thumbnail/images/products/file.jpg
                  fileType: image
                  mime: image/jpeg
                  width: 100
                  height: 100
                  size: 100
                  hasAlpha: false
                  customMetadata:
                    brand: Nike
                    color: red
                  createdAt: "2019-08-24T06:14:41.313Z"
                  updatedAt: "2019-08-24T06:14:41.313Z"
        "404":
          description: File or file version does not exist.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: The requested file version does not exist.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io.
  /v1/files/addTags:
    post:
      tags:
        - Digital Asset Management (DAM)
        - Managing assets
      operationId: add-tags-bulk
      summary: Add tags (bulk)
      description: |
        This API adds tags to multiple files in bulk.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - fileIds
                - tags
              properties:
                fileIds:
                  type: array
                  items:
                    type: string
                  description: |
                    An array of fileIds to which you want to add tags.
                tags:
                  type: array
                  items:
                    type: string
                  description: |
                    An array of tags that you want to add to the files.
            example:
              fileIds:
                - 598821f949c0a938d57563bd
                - 598821f949c0a938d57563be
              tags:
                - t-shirt
                - round-neck
                - sale2019
      responses:
        "429":
          $ref: '#/components/responses/RateLimitExceeded'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "200":
          description: Tags added successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  successfullyUpdatedFileIds:
                    type: array
                    items:
                      type: string
                    description: |
                      An array of fileIds that in which tags were successfully added.
        "207":
          description: Partially successful. Some files were not updated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  successfullyUpdatedFileIds:
                    type: array
                    items:
                      type: string
                    description: |
                      An array of fileIds that were successfully updated.
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        fileId:
                          type: string
                          description: Unique identifier of the file that was not updated.
                        error:
                          type: string
                          description: |
                            Error message for the file that was not updated.
                    description: |
                      An array of fileIds that were not updated and the error.      
        "404":
          description: File not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: The requested file(s) does not exist.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io.
                  missingFileIds:
                    type: array
                    items:
                      type: string
                    description: |
                      An array of fileIds that were not found.
  /v1/files/removeTags:
    post:
      tags:
        - Digital Asset Management (DAM)
        - Managing assets
      operationId: remove-tags-bulk
      summary: Remove tags (bulk)
      description: |
        This API removes tags from multiple files in bulk.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - fileIds
                - tags
              properties:
                fileIds:
                  type: array
                  items:
                    type: string
                  description: |
                    An array of fileIds from which you want to remove tags.
                tags:
                  type: array
                  items:
                    type: string
                  description: |
                    An array of tags that you want to remove from the files.
            example:
              fileIds:
                - 598821f949c0a938d57563bd
                - 598821f949c0a938d57563be
              tags:
                - t-shirt
                - round-neck
                - sale2019
      responses:
        "429":
          $ref: '#/components/responses/RateLimitExceeded'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "200":
          description: Tags removed successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  successfullyUpdatedFileIds:
                    type: array
                    items:
                      type: string
                    description: |
                      An array of fileIds that in which tags were successfully removed.
        "207":
          description: Partially successful. Some files were not updated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  successfullyUpdatedFileIds:
                    type: array
                    items:
                      type: string
                    description: |
                      An array of fileIds that were successfully updated.
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        fileId:
                          type: string
                          description: Unique identifier of the file that was not updated.
                        error:
                          type: string
                          description: |
                            Error message for the file that was not updated.
                    description: |
                      An array of fileIds that were not updated and the error.
        
        "404":
          description: File not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: The requested file(s) does not exist.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io.
                  missingFileIds:
                    type: array
                    items:
                      type: string
                    description: |
                      An array of fileIds that were not found.
  /v1/files/removeAITags:
    post:
      tags:
        - Digital Asset Management (DAM)
        - Managing assets
      operationId: remove-ai-tags-bulk
      summary: Remove AI tags (bulk)
      description: |
        This API removes AITags from multiple files in bulk.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - fileIds
                - tags
              properties:
                fileIds:
                  type: array
                  items:
                    type: string
                  description: |
                    An array of fileIds from which you want to remove AITags.
                tags:
                  type: array
                  items:
                    type: string
                  description: |
                    An array of AITags that you want to remove from the files.
            example:
              fileIds:
                - 598821f949c0a938d57563bd
                - 598821f949c0a938d57563be
              tags:
                - t-shirt
                - round-neck
                - sale2019
      responses:
        "429":
          $ref: '#/components/responses/RateLimitExceeded'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "200":
          description: AITags removed successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  successfullyUpdatedFileIds:
                    type: array
                    items:
                      type: string
                    description: |
                      An array of fileIds that in which AITags were successfully removed.
        "207":
          description: Partially successful. Some files were not updated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  successfullyUpdatedFileIds:
                    type: array
                    items:
                      type: string
                    description: |
                      An array of fileIds that were successfully updated.
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        fileId:
                          type: string
                          description: Unique identifier of the file that was not updated.
                        error:
                          type: string
                          description: |
                            Error message for the file that was not updated.
                    description: |
                      An array of fileIds that were not updated and the error. 
        "404":
          description: File not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: The requested file(s) does not exist.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io.
  /v1/folder:
    post:
      tags:
        - Digital Asset Management (DAM)
        - Managing folders
      operationId: create-folder
      summary: Create folder
      description: |
        This will create a new folder. You can specify the folder name and location of the parent folder where this new folder should be created.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - folderName
                - parentFolderPath
              properties:
                folderName:
                  type: string
                  description: |
                    The folder will be created with this name. 

                    All characters except alphabets and numbers (inclusive of unicode letters, marks, and numerals in other languages) will be replaced by an underscore i.e. `_`.
                parentFolderPath:
                  type: string
                  description: |
                    The folder where the new folder should be created, for root use `/` else the path e.g. `containing/folder/`.

                    Note: If any folder(s) is not present in the parentFolderPath parameter, it will be automatically created. For example, if you pass `/product/images/summer`, then `product`, `images`, and `summer` folders will be created if they don't already exist.
            example:
              folderName: summer
              parentFolderPath: /product/images/
      responses:
        "429":
          $ref: '#/components/responses/RateLimitExceeded'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "201":
          description: Folder created successfully.
          content:
            application/json:
              schema:
                type: object
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  reason:
                    type: string
                    example: INVALID_FOLDER_PATH
                  message:
                    type: string
                    description: Human readable error message.
                    example: "'.' & '..' can not be used as folder-name"
                  help:
                    type: string
                    description: Human readable help instructions.
                    example: For support kindly contact us at support@imagekit.io.
    delete:
      tags:
        - Digital Asset Management (DAM)
        - Managing folders
      operationId: delete-folder
      summary: Delete folder
      description: |
        This will delete a folder and all its contents permanently. The API returns an empty response.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - folderPath
              properties:
                folderPath:
                  type: string
                  description: |
                    Full path to the folder you want to delete. For example `/folder/to/delete/`.
            example:
              folderPath: /folder/to/delete/
      responses:
        "429":
          $ref: '#/components/responses/RateLimitExceeded'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "204":
          description: Folder deleted successfully.
          content:
            application/json:
              schema:
                type: object
        "404":
          description: Folder not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  reason:
                    type: string
                    example: FOLDER_NOT_FOUND
                  message:
                    type: string
                    example: No folder found with folderPath `/folder/to/delete/`.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io.
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  reason:
                    type: string
                    example: TOO_MANY_OBJECTS
                  message:
                    type: string
                    description: Human readable error message.
                    example: Total nested assets (files, folders and file versions) are more than allowed limit of 100000 items.
                  help:
                    type: string
                    description: Human readable help instructions.
                    example: For support kindly contact us at support@imagekit.io.
  /v1/bulkJobs/copyFolder:
    post:
      tags:
        - Digital Asset Management (DAM)
        - Managing folders
      operationId: copy-folder
      summary: Copy folder
      description: |
        This will copy one folder into another. The selected folder, its nested folders, files, and their versions (in `includeVersions` is set to true) are copied in this operation. Note: If any file at the destination has the same name as the source file, then the source file and its versions will be appended to the destination file version history.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - sourceFolderPath
                - destinationPath
              properties:
                sourceFolderPath:
                  type: string
                  description: |
                    The full path to the source folder you want to copy.
                  example: /path/of/source/folder
                destinationPath:
                  type: string
                  description: |
                    Full path to the destination folder where you want to copy the source folder into.
                  example: /path/of/destination/folder
                includeVersions:
                  type: boolean
                  description: |
                    Option to copy all versions of files that are nested inside the selected folder. By default, only the current version of each file will be copied. When set to true, all versions of each file will be copied. Default value - `false`.
                  example: true
      responses:
        "429":
          $ref: '#/components/responses/RateLimitExceeded'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "200":
          description: Job submitted successfully. A `jobId` will be returned.
          content:
            application/json:
              schema:
                type: object
                properties:
                  jobId:
                    type: string
                    description: |
                      Unique identifier of the bulk job. This can be used to check the status of the bulk job.
        "404":
          description: Folder not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  reason:
                    type: string
                    example: NO_FILES_FOLDER
                  message:
                    type: string
                    example: No files & folder found at sourceFolderPath `/folder/to/copy`.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io.
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: sourceFolderPath and destinationPath is same
                  reason:
                    type: string
                    examples:
                      - MISSING_PARAMETER
                      - INVALID_PARAMETER
                      - TOO_MANY_OBJECTS
                      - SOURCE_IS_ROOT
                      - SAME_SOURCE_AND_DESTINATION
                      - INVALID_FOLDER_PATH
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io.
  /v1/bulkJobs/moveFolder:
    post:
      tags:
        - Digital Asset Management (DAM)
        - Managing folders
      operationId: move-folder
      summary: Move folder
      description: |
        This will move one folder into another. The selected folder, its nested folders, files, and their versions are moved in this operation. Note: If any file at the destination has the same name as the source file, then the source file and its versions will be appended to the destination file version history.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - sourceFolderPath
                - destinationPath
              properties:
                sourceFolderPath:
                  type: string
                  description: |
                    The full path to the source folder you want to move.
                  example: /path/of/source/folder
                destinationPath:
                  type: string
                  description: |
                    Full path to the destination folder where you want to move the source folder into.
                  example: /path/of/destination/folder
      responses:
        "429":
          $ref: '#/components/responses/RateLimitExceeded'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "200":
          description: Job submitted successfully. A `jobId` will be returned.
          content:
            application/json:
              schema:
                type: object
                properties:
                  jobId:
                    type: string
                    description: |
                      Unique identifier of the bulk job. This can be used to check the status of the bulk job.
        "404":
          description: Folder not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  reason:
                    type: string
                    example: NO_FILES_FOLDER
                  message:
                    type: string
                    example: No files & folder found at sourceFolderPath `/folder/to/move`.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io.
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: This operation is not allowed because parent folder cannot be moved into child folder.
                  reason:
                    type: string
                    examples:
                      - MISSING_PARAMETER
                      - INVALID_PARAMETER
                      - TOO_MANY_OBJECTS
                      - SOURCE_IS_ROOT
                      - SAME_SOURCE_AND_DESTINATION
                      - INVALID_FOLDER_PATH
                      - INVALID_DESTINATION_PATH
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io.
  /v1/bulkJobs/{jobId}:
    get:
      tags:
        - Digital Asset Management (DAM)
        - Managing folders
      operationId: bulk-job-status
      summary: Bulk job status
      description: |
        This API returns the status of a bulk job like copy and move folder operations.
      parameters:
        - description: |
            The `jobId` is returned in the response of bulk job API e.g. copy folder or move folder API.
          in: path
          name: jobId
          required: true
          schema:
            type: string
      responses:
        "429":
          $ref: '#/components/responses/RateLimitExceeded'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "200":
          description: |
            On success, you will receive the status of the bulk job in the response body.
          content:
            application/json:
              schema:
                type: object
                properties:
                  jobId:
                    type: string
                    description: |
                      Unique identifier of the bulk job.
                  type:
                    type: string
                    description: |
                      Type of the bulk job. Possible values - `COPY_FOLDER`, `MOVE_FOLDER`.
                  status:
                    type: string
                    description: |
                      Status of the bulk job. Possible values - `Pending`, `Completed`.
                example:
                  jobId: 5d5b1a9b4c8c4c0001f3e4a2
                  type: COPY_FOLDER
                  status: Completed
        "404":
          description: Job not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: The requested job does not exist.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io.
  /v1/files/purge:
    post:
      tags:
        - Caching
      operationId: purge-cache
      summary: Purge cache
      description: |
        This API will purge CDN cache and ImageKit.io's internal cache for a file.  Note: Purge cache is an asynchronous process and it may take some time to reflect the changes.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - url
              properties:
                url:
                  type: string
                  description: |
                    The full URL of the file to be purged.
                  example: https://ik.imagekit.io/your_imagekit_id/default-image.jpg
      responses:
        "429":
          $ref: '#/components/responses/RateLimitExceeded'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "201":
          description: Purge request submitted successfully. A `requestId` will be returned.
          content:
            application/json:
              schema:
                type: object
                properties:
                  requestId:
                    type: string
                    description: |
                      Unique identifier of the purge request. This can be used to check the status of the purge request.
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: The URL is not valid for cache purging.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io.
  /v1/files/purge/{requestId}:
    get:
      tags:
        - Caching
      operationId: purge-status
      summary: Get purge status
      description: |
        This API returns the status of a purge cache request.
      parameters:
        - description: |
            Should be a valid requestId.
          in: path
          name: requestId
          required: true
          schema:
            type: string
      responses:
        "429":
          $ref: '#/components/responses/RateLimitExceeded'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "200":
          description: |
            On success, you will receive the status of the purge request in the response body.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: Completed
                    enum:
                      - Pending
                      - Completed
                    description: |
                      Status of the purge request.
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: No request found for this requestId.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io.
  /v1/files/{fileId}/metadata:
    get:
      tags:
        - File Metadata
      operationId: get-uploaded-file-metadata
      summary: Get uploaded file metadata
      description: |
        You can programmatically get image EXIF, pHash, and other metadata for uploaded files in the ImageKit.io media library using this API.

        You can also get the metadata in upload API response by passing `metadata` in `responseFields` parameter.
      parameters:
        - description: |
            The unique `fileId` of the uploaded file. `fileId` is returned in the list and search assets API and upload API.
          in: path
          name: fileId
          required: true
          schema:
            type: string
      responses:
        "429":
          $ref: '#/components/responses/RateLimitExceeded'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "200":
          description: File metadata object.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MetadataResponse"
              examples:
                Image:
                  value:
                    height: 68
                    width: 100
                    size: 7749
                    format: jpg
                    hasColorProfile: true
                    quality: 0
                    density: 72
                    hasTransparency: false
                    pHash: f06830ca9f1e3e90
                    exif:
                      image:
                        Make: Canon
                        Model: Canon EOS 40D
                        Orientation: 1
                        XResolution: 72
                        YResolution: 72
                        ResolutionUnit: 2
                        Software: GIMP 2.4.5
                        ModifyDate: 2008:07:31 10:38:11
                        YCbCrPositioning: 2
                        ExifOffset: 214
                        GPSInfo: 978
                      thumbnail:
                        Compression: 6
                        XResolution: 72
                        YResolution: 72
                        ResolutionUnit: 2
                        ThumbnailOffset: 1090
                        ThumbnailLength: 1378
                      exif:
                        ExposureTime: 0.00625
                        FNumber: 7.1
                        ExposureProgram: 1
                        ISO: 100
                        ExifVersion: "0221"
                        DateTimeOriginal: 2008:05:30 15:56:01
                        CreateDate: 2008:05:30 15:56:01
                        ShutterSpeedValue: 7.375
                        ApertureValue: 5.625
                        ExposureCompensation: 0
                        MeteringMode: 5
                        Flash: 9
                        FocalLength: 135
                        SubSecTime: "00"
                        SubSecTimeOriginal: "00"
                        SubSecTimeDigitized: "00"
                        FlashpixVersion: "0100"
                        ColorSpace: 1
                        ExifImageWidth: 100
                        ExifImageHeight: 68
                        InteropOffset: 948
                        FocalPlaneXResolution: 4438.356164383562
                        FocalPlaneYResolution: 4445.969125214408
                        FocalPlaneResolutionUnit: 2
                        CustomRendered: 0
                        ExposureMode: 1
                        WhiteBalance: 0
                        SceneCaptureType: 0
                      gps:
                        GPSVersionID:
                          - 2
                          - 2
                          - 0
                          - 0
                      interoperability:
                        InteropIndex: R98
                        InteropVersion: "0100"
                      makernote: {}
                Video:
                  value:
                    height: 720
                    width: 1280
                    bitRate: 546524
                    duration: 70
                    audioCodec: aac
                    videoCodec: h264
                    size: 23490
                    exif:
                      image:
                        Make: "Canon"
                        Model: "Canon EOS 40D"
                        Orientation: 1
                        XResolution: 72
                        YResolution: 72
                        ResolutionUnit: 2
                        Software: "GIMP 2.4.5"
                        ModifyDate: "2008:07:31 10:38:11"
                        YCbCrPositioning: 2
                        ExifOffset: 214
                        GPSInfo: 978
                      thumbnail:
                        Compression: 6
                        XResolution: 72
                        YResolution: 72
                        ResolutionUnit: 2
                        ThumbnailOffset: 1090
                        ThumbnailLength: 1378
                      exif:
                        ExposureTime: 0.00625
                        FNumber: 7.1
                        ExposureProgram: 1
                        ISO: 100
                        ExifVersion: "0221"
                        DateTimeOriginal: "2008:05:30 15:56:01"
                        CreateDate: "2008:05:30 15:56:01"
                        ShutterSpeedValue: 7.375
                        ApertureValue: 5.625
                        ExposureCompensation: 0
                        MeteringMode: 5
                        Flash: 9
                        FocalLength: 135
                        SubSecTime: "00"
                        SubSecTimeOriginal: "00"
                        SubSecTimeDigitized: "00"
                        FlashpixVersion: "0100"
                        ColorSpace: 1
                        ExifImageWidth: 100
                        ExifImageHeight: 68
                        InteropOffset: 948
                        FocalPlaneXResolution: 4438.356164383562
                        FocalPlaneYResolution: 4445.969125214408
                        FocalPlaneResolutionUnit: 2
                        CustomRendered: 0
                        ExposureMode: 1
                        WhiteBalance: 0
                        SceneCaptureType: 0
                      gps:
                        GPSVersionID: [2, 2, 0, 0]
                      interoperability:
                        InteropIndex: "R98"
                        InteropVersion: "0100"
                      makernote: {}
        "404":
          description: File not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: The requested file does not exist or is inaccessible at this time.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io.
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: The requested file is corrupt or invalid.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io.
  /v1/files/metadata:
    get:
      tags:
        - File Metadata
      operationId: get-metadata-from-url
      summary: Get metadata from remote URL
      description: |
        Get image EXIF, pHash, and other metadata from ImageKit.io powered remote URL using this API.
      parameters:
        - description: |
            Should be a valid file URL. It should be accessible using your ImageKit.io account.
          in: query
          name: url
          required: true
          schema:
            type: string
      responses:
        "429":
          $ref: '#/components/responses/RateLimitExceeded'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "200":
          description: File metadata object.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MetadataResponse"
              examples:
                Image:
                  value:
                    height: 68
                    width: 100
                    size: 7749
                    format: jpg
                    hasColorProfile: true
                    quality: 0
                    density: 72
                    hasTransparency: false
                    pHash: f06830ca9f1e3e90
                    exif:
                      image:
                        Make: Canon
                        Model: Canon EOS 40D
                        Orientation: 1
                        XResolution: 72
                        YResolution: 72
                        ResolutionUnit: 2
                        Software: GIMP 2.4.5
                        ModifyDate: 2008:07:31 10:38:11
                        YCbCrPositioning: 2
                        ExifOffset: 214
                        GPSInfo: 978
                      thumbnail:
                        Compression: 6
                        XResolution: 72
                        YResolution: 72
                        ResolutionUnit: 2
                        ThumbnailOffset: 1090
                        ThumbnailLength: 1378
                      exif:
                        ExposureTime: 0.00625
                        FNumber: 7.1
                        ExposureProgram: 1
                        ISO: 100
                        ExifVersion: "0221"
                        DateTimeOriginal: 2008:05:30 15:56:01
                        CreateDate: 2008:05:30 15:56:01
                        ShutterSpeedValue: 7.375
                        ApertureValue: 5.625
                        ExposureCompensation: 0
                        MeteringMode: 5
                        Flash: 9
                        FocalLength: 135
                        SubSecTime: "00"
                        SubSecTimeOriginal: "00"
                        SubSecTimeDigitized: "00"
                        FlashpixVersion: "0100"
                        ColorSpace: 1
                        ExifImageWidth: 100
                        ExifImageHeight: 68
                        InteropOffset: 948
                        FocalPlaneXResolution: 4438.356164383562
                        FocalPlaneYResolution: 4445.969125214408
                        FocalPlaneResolutionUnit: 2
                        CustomRendered: 0
                        ExposureMode: 1
                        WhiteBalance: 0
                        SceneCaptureType: 0
                      gps:
                        GPSVersionID:
                          - 2
                          - 2
                          - 0
                          - 0
                      interoperability:
                        InteropIndex: R98
                        InteropVersion: "0100"
                      makernote: {}
                Video:
                  value:
                    height: 720
                    width: 1280
                    bitRate: 546524
                    duration: 70
                    audioCodec: aac
                    videoCodec: h264
                    size: 23490
                    exif:
                      image:
                        Make: "Canon"
                        Model: "Canon EOS 40D"
                        Orientation: 1
                        XResolution: 72
                        YResolution: 72
                        ResolutionUnit: 2
                        Software: "GIMP 2.4.5"
                        ModifyDate: "2008:07:31 10:38:11"
                        YCbCrPositioning: 2
                        ExifOffset: 214
                        GPSInfo: 978
                      thumbnail:
                        Compression: 6
                        XResolution: 72
                        YResolution: 72
                        ResolutionUnit: 2
                        ThumbnailOffset: 1090
                        ThumbnailLength: 1378
                      exif:
                        ExposureTime: 0.00625
                        FNumber: 7.1
                        ExposureProgram: 1
                        ISO: 100
                        ExifVersion: "0221"
                        DateTimeOriginal: "2008:05:30 15:56:01"
                        CreateDate: "2008:05:30 15:56:01"
                        ShutterSpeedValue: 7.375
                        ApertureValue: 5.625
                        ExposureCompensation: 0
                        MeteringMode: 5
                        Flash: 9
                        FocalLength: 135
                        SubSecTime: "00"
                        SubSecTimeOriginal: "00"
                        SubSecTimeDigitized: "00"
                        FlashpixVersion: "0100"
                        ColorSpace: 1
                        ExifImageWidth: 100
                        ExifImageHeight: 68
                        InteropOffset: 948
                        FocalPlaneXResolution: 4438.356164383562
                        FocalPlaneYResolution: 4445.969125214408
                        FocalPlaneResolutionUnit: 2
                        CustomRendered: 0
                        ExposureMode: 1
                        WhiteBalance: 0
                        SceneCaptureType: 0
                      gps:
                        GPSVersionID: [2, 2, 0, 0]
                      interoperability:
                        InteropIndex: "R98"
                        InteropVersion: "0100"
                      makernote: {}
        "404":
          description: File not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: The requested file does not exist or is inaccessible at this time.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io.
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: The url should be accessible using your ImageKit.io account.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io.
  /api/v1/files/upload:
    servers:
      - url: https://upload.imagekit.io
    post:
      tags:
        - Upload File
      operationId: upload-file
      summary: Upload file V1
      security: []
      description: |
        You can upload files to the ImageKit.io media library from your server-side using private API key authentication.

        File size limit:
        The maximum upload file size is limited to 25MB on the free plan. On paid plan, this limit is 300MB for video files.

        Version limit:
        A file can have a maximum of 100 versions.
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
          description: >
            Authorization is different for server-side vs client-side file upload.

            ### Authorization for server-side file upload

            Basic HTTP authentication. Provide base64 encoded value of the string `your_private_api_key:`.

        
            Notice the colon (:) after the private key. It is required otherwise, authentication will fail. The format is `username:password`. `username` is your private key and `password` is an empty string.

        
            If you encode `your_private_api_key:` using base64, you will get `eW91cl9wcml2YXRlX2FwaV9rZXk6`.

            
            For example - `Authorization: Basic eW91cl9wcml2YXRlX2FwaV9rZXk6`

            ### Authorization for client-side file upload

            For client-side file upload, do not set `Authorization` header. 
            
            
            Instead pass `signature`, one-time `token` and `expire` as shown below.


            Learn [how to implement client-side file upload](#how-to-implement-client-side-file-upload).
      requestBody:
       content:
          multipart/form-data:
            schema:
              oneOf:
                - $ref: '#/components/schemas/ServerSideUploadV1'
                - $ref: '#/components/schemas/ClientSideUploadV1'
      responses:
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "200":
          description: File uploaded successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UploadResponse"
        "202":
          description: File accepted for upload. Pre transformation for video is being processed.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: The pre-transformation has been queued successfully.
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    examples:
                    - Your request is missing file parameter.
                    - Your request contains both signature and basic auth parameter. Use only one method, you might be exposing your private API key.
                    - Your request contains invalid expire parameter. Expire parameter should be a Unix time in less than 1 hour into the future.
                    - A file with the same name already exists at the exact location. We could not overwrite it because both overwriteFile and useUniqueFileName are set to false.
                    - Your request contains invalid file parameter. The file size exceeds limits.
                    - Upload Limit Exceeded.
                    - Extensions quota exceeded.
                    - The file could not be uploaded because the transformation field is invalid.
                    - The file could not be uploaded because transformations are supported only for image and video files.
                    - The file could not be uploaded because the detected file type & post-transformation are incompatible.
                    - You have sent too many requests to update the file recently. Please try again later.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io.
  /api/v2/files/upload:
    servers:
      - url: https://upload.imagekit.io
    post:
      tags:
        - Upload File
      operationId: upload-file-v2
      summary: Upload file V2
      security: []
      description: |
        This API is in beta and subject to change.

        You can upload files to the ImageKit.io media library from your server-side using private API key authentication.

        File size limit:
        The maximum upload file size is limited to 25MB on the free plan. On paid plan, this limit is 300MB for video files.

        Version limit:
        A file can have a maximum of 100 versions.
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
          description: >
            Authorization is different for server-side vs client-side file upload.


            ### Authorization for server-side file upload
            
            Basic HTTP authentication. Provide base64 encoded value of the string `your_private_api_key:`.
        
        
            Notice the colon (:) after the private key. It is required otherwise, authentication will fail. The format is `username:password`. `username` is your private key and `password` is an empty string.

        
            If you encode `your_private_api_key:` using base64, you will get `eW91cl9wcml2YXRlX2FwaV9rZXk6`.

            
            For example - `Authorization: Basic eW91cl9wcml2YXRlX2FwaV9rZXk6`
            
            
            ### Authorization for client-side file upload
            
            For client-side file upload, do not set `Authorization` header. Instead your client-side application must pass a JSON Web Token (JWT) as an authentication parameter. The upload API expects a `token` as a parameter. 
            
            
            Learn [how to implement secure client-side file upload](#how-to-implement-secure-client-side-file-upload).
      requestBody:
       content:
          multipart/form-data:
            schema:
              oneOf:
                - $ref: '#/components/schemas/ServerSideUploadV2'
                - $ref: '#/components/schemas/ClientSideUploadV2'
      responses:
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "200":
          description: File uploaded successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UploadResponse"
        "202":
          description: File accepted for upload. Pre transformation for video is being processed.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: The pre-transformation has been queued successfully.
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    examples:
                    - Your request is missing file parameter.
                    - Your request contains both token and basic auth parameter. Use only one method, you might be exposing your private API key.
                    - Your request contains invalid payload. It does not match with the payload used to generate token.
                    - Your request is missing token parameter.
                    - Your request contains expired token.
                    - Your request has invalid token.
                    - A file with the same name already exists at the exact location. We could not overwrite it because both overwriteFile and useUniqueFileName are set to false.
                    - Your request contains invalid file parameter. The file size exceeds limits.
                    - Upload Limit Exceeded.
                    - Extensions quota exceeded.
                    - The file could not be uploaded because the transformation field is invalid.
                    - The file could not be uploaded because transformations are supported only for image and video files.
                    - The file could not be uploaded because the detected file type & post-transformation are incompatible.
                    - You have sent too many requests to update the file recently. Please try again later.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io.
  /v1/accounts/usage:
    get:
      tags:
        - Account Management API
      operationId: get-usage
      summary: Get account usage information
      description: >
        Get the account usage information between two dates. Note that the API response includes data from the start date while excluding data from the end date. In other words, the data covers the period starting from the specified start date up to, but not including, the end date.
      parameters:
        - in: query
          name: startDate
          description: Specify a `startDate` in `YYYY-MM-DD` format. It should be before the `endDate`. The difference between `startDate` and `endDate` should be less than 90 days.
          schema:
            type: string
            format: date
          required: false
        - in: query
          name: endDate
          description: Specify a `endDate` in `YYYY-MM-DD` format. It should be after the `startDate`. The difference between `startDate` and `endDate` should be less than 90 days.
          schema:
            type: string
            format: date
          required: false
      responses:
        200:
          description: In the response, you will get different usage metrics.
          content:
            application/json:
              schema:
                type: object
                properties:
                  bandwidthBytes:
                    type: integer
                    description: Amount of bandwidth used in bytes.
                  mediaLibraryStorageBytes:
                    type: integer
                    description: Storage used by media library in bytes.
                  videoProcessingUnitsCount:
                    type: integer
                    description: Number of video processing units used.
                  extensionUnitsCount:
                    type: integer
                    description: Number of extension units used.
                  originalCacheStorageBytes:
                    type: integer
                    description: Storage used by the original cache in bytes.
              examples:
                default:
                  value:
                    bandwidthBytes: 21991583578
                    mediaLibraryStorageBytes: 1878758298
                    videoProcessingUnitsCount: 0
                    extensionUnitsCount: 0
                    originalCacheStorageBytes: 0
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: startDate and endDate should be within 90 days.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io.
        "429":
          $ref: '#/components/responses/RateLimitExceeded'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
components:
  schemas:
    CustomMetadataField:
      type: object
      required:
        - id
        - name
        - label
        - schema
      properties:
        id:
          type: string
          description: Unique identifier for the custom metadata field. Use this to update the field.
        name:
          type: string
          description: |
            API name of the custom metadata field. This becomes the key while setting `customMetadata` (key-value object) for an asset using upload or update API.
        label:
          type: string
          description: |
            Human readable name of the custom metadata field. This name is displayed as form field label to the users while setting field value on the asset in the media library UI.
        schema:
          type: object
          description: An object that describes the rules for the custom metadata field value.
          required:
            - type
          properties:
            type:
              description: Type of the custom metadata field.
              type: string
              enum:
                - Text
                - TextArea
                - Number
                - Date
                - Boolean
                - SingleSelect
                - MultiSelect
            selectOptions:
              type: array
              items: {}
              description: |
                An array of allowed values when field type is `SingleSelect` or `MultiSelect`.
              example:
                - small
                - medium
                - large
                - 30
                - 40
                - true
            defaultValue:
              description: |
                The default value for this custom metadata field. Date type of default value depends on the field type.
            isValueRequired:
              type: boolean
              description: |
                Specifies if the this custom metadata field is required or not.
            minValue:
              description: |
                Minimum value of the field. It is only set if field type is `Date` or `Number`. For `Date` type field, the value will be in ISO8601 string format. For `Number` type field, it will be a numeric value.
            maxValue:
              description: |
                Maximum value of the field. Only set this property if `type` is set to `Date` or `Number`. For `Date` type field, the value will be in ISO8601 string format. For `Number` type field, it will be a numeric value.
            minLength:
              description: |
                Minimum length of string. Only set this property if `type` is set to `Text` or `Textarea`.
              type: number
            maxLength:
              description: |
                Maximum length of string. Only set this property if `type` is set to `Text` or `Textarea`.
              type: number
    FileDetails:
      type: object
      properties:
        fileId:
          type: string
          description: Unique identifier of the asset.
        type:
          type: string
          description: Type of the asset.
        name:
          type: string
          description: Name of the asset.
        filePath:
          type: string
          description: |
            Path of the file. This is the path you would use in the URL to access the file. For example, if the file is at the root of the media library, the path will be `/file.jpg`. If the file is inside a folder named `images`, the path will be `/images/file.jpg`.
        tags:
          oneOf:
            - type: array
              items:
                type: string
            - nullable: true
          description: |
            An array of tags assigned to the file. Tags are used to search files in the media library.
        AITags:
          oneOf:
            - type: array
              items:
                type: object
                properties:
                  name:
                    type: string
                    description: Name of the tag.
                  confidence:
                    type: number
                    description: Confidence score of the tag.
                  source:
                    type: string
                    description: Source of the tag. Possible values are `google-auto-tagging` and `aws-auto-tagging`.
            - nullable: true
          description: |
            An array of tags assigned to the file by auto tagging.
        versionInfo:
          type: object
          properties:
            id:
              type: string
              description: Unique identifier of the file version.
            name:
              type: string
              description: Name of the file version.
          description: |
            An object with details of the file version.
        isPrivateFile:
          type: boolean
          description: |
            Specifies if the file is private or not.
        customCoordinates:
          oneOf:
            - type: string
            - nullable: true
          description: |
            An string with custom coordinates of the file.
        url:
          type: string
          description: |
            URL of the file.
        thumbnail:
          type: string
          description: |
            URL of the thumbnail image. This URL is used to access the thumbnail image of the file in the media library.
        fileType:
          type: string
          description: |
            Type of the file. Possible values are `image`, `non-image`.
        mime:
          type: string
          description: |
            MIME type of the file.
        width:
          type: number
          description: |
            Width of the file.
        height:
          type: number
          description: |
            Height of the file.
        size:
          type: number
          description: |
            Size of the file in bytes.
        hasAlpha:
          type: boolean
          description: |
            Specifies if the image has an alpha channel.
        customMetadata:
          type: object
          description: |
            An object with custom metadata for the file.
        createdAt:
          type: string
          description: |
            Date and time when the file was uploaded. The date and time is in ISO8601 format.
        updatedAt:
          type: string
          description: |
            Date and time when the file was last updated. The date and time is in ISO8601 format.
    UploadResponse:
      type: object
      properties:
        fileId:
          type: string
          description: Unique fileId. Store this fileld in your database, as this will be used to perform update action on this file.
        type:
          type: string
          description: Type of the asset.
        name:
          type: string
          description: Name of the asset.
        filePath:
          type: string
          description: The relative path of the file. In the case of an image, you can use this path to construct different transformations.
        tags:
          oneOf:
            - type: array
              items:
                type: string
            - nullable: true
          description: The array of tags associated with the image. If no tags are set, it will be `null`.
        AITags:
          oneOf:
            - type: array
              items:
                type: object
                properties:
                  name:
                    type: string
                    description: Name of the tag.
                  confidence:
                    type: number
                    description: Confidence score of the tag.
                  source:
                    type: string
                    description: Array of `AITags` associated with the image. If no `AITags` are set, it will be null. These tags can be added using the `google-auto-tagging` or `aws-auto-tagging` extensions.
            - nullable: true
          description: |
            An array of tags assigned to the uploaded file by auto tagging.
        versionInfo:
          type: object
          properties:
            id:
              type: string
              description: Unique identifier of the file version.
            name:
              type: string
              description: Name of the file version.
          description: |
            An object containing the file or file version's `id` (versionId) and `name`.
        isPrivateFile:
          type: boolean
          description: |
            Is the file marked as private. It can be either `true` or `false`.
        customCoordinates:
          oneOf:
            - type: string
            - nullable: true
          description: |
            Value of custom coordinates associated with the image in the format `x,y,width,height`. If `customCoordinates` are not defined, then it is `null`.
        url:
          type: string
          description: A publicly accessible URL of the file.
        thumbnail:
          type: string
          description: In the case of an image, a small thumbnail URL.
        fileType:
          type: string
          description: |
            Type of the uploaded file. Possible values are `image`, `non-image`.
        mime:
          type: string
          description: |
            MIME Type of the file.
          example: image/jpeg
        height:
          type: number
          description: Height of the image in pixels (Only for images)
        width:
          type: number
          description: Width of the image in pixels (Only for Images)
        size:
          type: number
          description: Size of the image file in Bytes.
        hasAlpha:
          type: boolean
          description: |
            A boolean indicating if the image has an alpha layer or not.
        customMetadata:
          type: object
          description: |
            A key-value data associated with the asset. Use `responseField` in API request to get `customMetadata` in the upload API response. Before setting any custom metadata on an asset, you have to create the field using custom metadata fields API.
        embeddedMetadata:
          type: object
          description: |
            Consolidated embedded metadata associated with the file. It includes `exif`, `iptc`, and `xmp` data. Use `responseField` in API request to get `embeddedMetadata` in the upload API response.
        createdAt:
          type: string
          description: |
            The date and time when the file was first uploaded. The format is YYYY-MM-DDTHH:mm:ss.sssZ
        updatedAt:
          type: string
          description: |
            The date and time when the file was first uploaded. The format is YYYY-MM-DDTHH:mm:ss.sssZ
        extensionStatus:
          type: object
          description: |
            Extension names with their processing status at the time of completion of the request. It could have one of the following status values:

            `success`: The extension has been successfully applied.
            `failed`: The extension has failed and will not be retried.
            `pending`: The extension will finish processing in some time. On completion, the final status (success / failed) will be sent to the `webhookUrl` provided.

            If no extension was requested, then this parameter is not returned.
          properties:
            google-auto-tagging:
              type: string
              enum: ["success", "pending", "failed"]
            aws-auto-tagging:
              type: string
              enum: ["success", "pending", "failed"]
            remove-bg:
              type: string
              enum: ["success", "pending", "failed"]
    ExifImage:
      type: object
      properties:
        Make:
          type: string
        Model:
          type: string
        Orientation:
          type: integer
        XResolution:
          type: integer
        YResolution:
          type: integer
        ResolutionUnit:
          type: integer
        Software:
          type: string
        ModifyDate:
          type: string
        YCbCrPositioning:
          type: integer
        ExifOffset:
          type: integer
        GPSInfo:
          type: integer
    Thumbnail:
      type: object
      properties:
        Compression:
          type: integer
        XResolution:
          type: integer
        YResolution:
          type: integer
        ResolutionUnit:
          type: integer
        ThumbnailOffset:
          type: integer
        ThumbnailLength:
          type: integer
    ExifDetails:
      type: object
      properties:
        ExposureTime:
          type: number
        FNumber:
          type: number
        ExposureProgram:
          type: integer
        ISO:
          type: integer
        ExifVersion:
          type: string
        DateTimeOriginal:
          type: string
        CreateDate:
          type: string
        ShutterSpeedValue:
          type: number
        ApertureValue:
          type: number
        ExposureCompensation:
          type: number
        MeteringMode:
          type: integer
        Flash:
          type: integer
        FocalLength:
          type: integer
        SubSecTime:
          type: string
        FlashpixVersion:
          type: string
        ColorSpace:
          type: integer
        ExifImageWidth:
          type: integer
        ExifImageHeight:
          type: integer
        InteropOffset:
          type: integer
        FocalPlaneXResolution:
          type: number
        FocalPlaneYResolution:
          type: number
        FocalPlaneResolutionUnit:
          type: integer
        CustomRendered:
          type: integer
        ExposureMode:
          type: integer
        WhiteBalance:
          type: integer
        SceneCaptureType:
          type: integer
    Gps:
      type: object
      properties:
        GPSVersionID:
          type: array
          items:
            type: integer
    Interoperability:
      type: object
      properties:
        InteropIndex:
          type: string
        InteropVersion:
          type: string
    MetadataResponse:
      type: object
      properties:
        height:
          type: integer
          description: The height of the image or video in pixels.
        width:
          type: integer
          description: The width of the image or video in pixels.
        size:
          type: integer
          description: The file size in bytes.
        format:
          type: string
          description: The format of the file (e.g., 'jpg', 'mp4').
        hasColorProfile:
          type: boolean
          description: Indicates if the image has a color profile.
        quality:
          type: integer
          description: The quality indicator of the image.
        density:
          type: integer
          description: The density of the image in DPI.
        hasTransparency:
          type: boolean
          description: Indicates if the image contains transparent areas.
        pHash:
          type: string
          description: Perceptual hash of the image.
        bitRate:
          type: integer
          description: The bit rate of the video in kbps (only for video).
        duration:
          type: integer
          description: The duration of the video in seconds (only for video).
        audioCodec:
          type: string
          description: The audio codec used in the video (only for video).
        videoCodec:
          type: string
          description: The video codec used in the video (only for video).
        exif:
          type: object
          properties:
            image:
              $ref: '#/components/schemas/ExifImage'
            thumbnail:
              $ref: '#/components/schemas/Thumbnail'
            exif:
              $ref: '#/components/schemas/ExifDetails'
            gps:
              $ref: '#/components/schemas/Gps'
            interoperability:
              $ref: '#/components/schemas/Interoperability'
            makernote:
              type: object
              additionalProperties: true
    ClientSideUploadV1:
      type: object
      title: Client side file upload
      required:
        - file
        - fileName
        - token
        - signature
        - expire
      properties:
        file:
          type: string
          description: >
            This field accepts three kinds of values:
            
            
              - `binary` - You can send the content of the file as binary. This is used when a file is being uploaded from the browser.
              - `base64` - Base64 encoded string of file content.
              - `url` - URL of the file from where to download the content before uploading.
            
            Note: When passing a URL in the file parameter, please ensure that our servers can access the URL. In case ImageKit is unable to download the file from the specified URL, a `400` error response is returned. This will also result in a `400` error if the file download request is aborted if response headers are not received in 8 seconds.
          example: "https://www.example.com/rest-of-the-image-path.jpg"
        fileName:
          type: string
          description: >
            The name with which the file has to be uploaded.
            
            The file name can contain:
            
              - Alphanumeric Characters: `a-z`, `A-Z`, `0-9`.
              - Special Characters: `.`, `-`
            
            Any other character including space will be replaced by `_`
        signature:
          type: string
          required: true
          description: >
            HMAC-SHA1 digest of the token+expire using your ImageKit.io private API key as a key. Learn how to create a signature on the page below. This should be in lowercase.

            
            Signature must be calculated on the server-side. This field is required for authentication when uploading a file from the client side.
        expire:
          type: string
          required: true
          description: >
            The time until your signature is valid. It must be a [Unix time](https://en.wikipedia.org/wiki/Unix_time) in less than 1 hour into the future. It should be in seconds.
        token:
          type: string
          required: true
          description: >
            A unique value that the ImageKit.io server will use to recognize and prevent subsequent retries for the same request. We suggest using V4 UUIDs, or another random string with enough entropy to avoid collisions.


            **Note**: Sending a value that has been used in the past will result in a validation error. Even if your previous request resulted in an error, you should always send a new value for this field.
        useUniqueFileName:
          type: string
          default: true
          description: >
            Whether to use a unique filename for this file or not.
            
            
            If `true`, ImageKit.io will add a unique suffix to the filename parameter to get a unique filename.
            
            
            If `false`, then the image is uploaded with the provided filename parameter, and any existing file with the same name is replaced.
          enum:
            - true
            - false
        tags:
          type: string
          description: >
            Set the tags while uploading the file.
            
            
            Comma-separated value of tags in the format `tag1,tag2,tag3`.
            The maximum length of all characters should not exceed 500. `%` is not allowed.
            
            
            If this field is not specified and the file is overwritten then the tags will be removed.
          example: "t-shirt,round-neck,men"
        folder:
          type: string
          description: >
            The folder path in which the image has to be uploaded.
            If the folder(s) didn't exist before, a new folder(s) is created.
            
            
            The folder name can contain:
            
              - Alphanumeric Characters: `a-z` , `A-Z` , `0-9`
              - Special Characters: `/` , `_` , `-`
            
            Using multiple `/` creates a nested folder.
          default: "/"
        isPrivateFile:
          type: string
          default: false
          description: >
            Whether to mark the file as private or not.
            
            
            If `true`, the file is marked as private and is accessible only using named transformation or signed URL.
          enum:
            - true
            - false
        isPublished:
          type: string
          default: true
          description: >
            Whether to upload file as published or not.
            
            
            If `false`, the file is marked as unpublished, which restricts access to the file only via the media library. Files in draft or unpublished state can only be publicly accessed after being published.
            
            
            The option to upload in draft state is only available in custom enterprise pricing plans.
          enum:
            - true
            - false
        customCoordinates:
          type: string
          description: >
            Define an important area in the image. This is only relevant for image type files.

              - To be passed as a string with the x and y coordinates of the top-left corner, and width and height of the area of interest in the format `x,y,width,height`. For example - `10,10,100,100`
              - Can be used with fo-customtransformation.
              - If this field is not specified and the file is overwritten, then customCoordinates will be removed.
        responseFields:
          type: string
          description: >
            Comma-separated values of the fields that you want the API to return in the response. 
            
            
            For example, set the value of this field to `tags,customCoordinates,isPrivateFile` to get the value of `tags`, `customCoordinates`, and `isPrivateFile` in the response.

            
            Accepts combination of `tags`, `customCoordinates`, `isPrivateFile`, `embeddedMetadata`, `customMetadata`, and `metadata`.
        extensions:
          type: string
          description: >
            Stringified JSON object with an array of extensions to be applied to the image. Refer to extensions schema in [update file API request body](/docs/api-reference/digital-asset-management-dam/managing-assets/update-file-details#request-body).
          example: [{"name":"remove-bg","options":{"add_shadow":true,"bg_colour":"green"}}, {"name":"google-auto-tagging","maxTags":5,"minConfidence":95}]
        webhookUrl:
          type: string
          description: >
            The final status of pending extensions will be sent to this URL.
        overwriteFile:
          type: string
          default: true
          description: >
            If `false` and `useUniqueFileName` is also `false`, and a file already exists at the exact location, upload API will return an error immediately.
        overwriteAITags:
          type: string
          default: true
          description: >
            If set to `true` and a file already exists at the exact location, its AITags will be removed. Set `overwriteAITags` to `false` to preserve AITags.
          enum:
            - true
            - false
        overwriteTags:
          type: string
          default: true
          description: >
            If the request does not have `tags`, and a file already exists at the exact location, existing tags will be removed.
          enum:
            - true
            - false
        overwriteCustomMetadata:
          type: string
          default: true
          description: >
            If the request does not have `customMetadata`, and a file already exists at the exact location, existing customMetadata will be removed.
          enum:
            - true
            - false
        customMetadata:
          type: string
          description: >
            Stringified JSON key-value data to be associated with the asset.
          example: {"brand":"Nike", "color":"red"}
        transformation:
          type: string
          description: >
            Stringified JSON object with properties for pre and post transformations:
            
            
            `pre` - Accepts a "string" containing a valid transformation used for requesting a pre-transformation for an image or a video file.
            
            
            `post` - Accepts an array of objects with properties:
              - `type`: One of `transformation`, `gif-to-video`, `thumbnail`, or `abs` (Adaptive bitrate streaming).
              - `value`: A "string" corresponding to the required transformation. Required if `type` is `transformation` or `abs`. Optional if `type` is `gif-to-video` or `thumbnail`.
              - `protocol`: Either `hls` or `dash`, applicable only if `type` is `abs`.
            
            Read more about [Adaptive bitrate streaming (ABS)](/docs/adaptive-bitrate-streaming).
          example: '{"pre": "width:300,height:300,quality:80", "post": [{"type": "thumbnail", "value": "width:100,height:100"}]}'
    ServerSideUploadV1:
      type: object
      title: Server side file upload
      required:
        - file
        - fileName
      properties:
        file:
          type: string
          description: >
            This field accepts three kinds of values:
            
            
              - `binary` - You can send the content of the file as binary. This is used when a file is being uploaded from the browser.
              - `base64` - Base64 encoded string of file content.
              - `url` - URL of the file from where to download the content before uploading.
            
            Note: When passing a URL in the file parameter, please ensure that our servers can access the URL. In case ImageKit is unable to download the file from the specified URL, a `400` error response is returned. This will also result in a `400` error if the file download request is aborted if response headers are not received in 8 seconds.
          example: "https://www.example.com/rest-of-the-image-path.jpg"
        fileName:
          type: string
          description: >
            The name with which the file has to be uploaded.
            
            The file name can contain:
            
              - Alphanumeric Characters: `a-z`, `A-Z`, `0-9`.
              - Special Characters: `.`, `-`
            
            Any other character including space will be replaced by `_`
        useUniqueFileName:
          type: string
          default: true
          description: >
            Whether to use a unique filename for this file or not.
            
            
            If `true`, ImageKit.io will add a unique suffix to the filename parameter to get a unique filename.
            
            
            If `false`, then the image is uploaded with the provided filename parameter, and any existing file with the same name is replaced.
          enum:
            - true
            - false
        tags:
          type: string
          description: >
            Set the tags while uploading the file.
            
            
            Comma-separated value of tags in the format `tag1,tag2,tag3`.
            The maximum length of all characters should not exceed 500. `%` is not allowed.
            
            
            If this field is not specified and the file is overwritten then the tags will be removed.
          example: "t-shirt,round-neck,men"
        folder:
          type: string
          description: >
            The folder path in which the image has to be uploaded.
            If the folder(s) didn't exist before, a new folder(s) is created.
            
            
            The folder name can contain:
            
              - Alphanumeric Characters: `a-z` , `A-Z` , `0-9`
              - Special Characters: `/` , `_` , `-`
            
            Using multiple `/` creates a nested folder.
          default: "/"
        isPrivateFile:
          type: string
          default: false
          description: >
            Whether to mark the file as private or not.
            
            
            If `true`, the file is marked as private and is accessible only using named transformation or signed URL.
          enum:
            - true
            - false
        isPublished:
          type: string
          default: true
          description: >
            Whether to upload file as published or not.
            
            
            If `false`, the file is marked as unpublished, which restricts access to the file only via the media library. Files in draft or unpublished state can only be publicly accessed after being published.
            
            
            The option to upload in draft state is only available in custom enterprise pricing plans.
          enum:
            - true
            - false
        customCoordinates:
          type: string
          description: >
            Define an important area in the image. This is only relevant for image type files.

              - To be passed as a string with the x and y coordinates of the top-left corner, and width and height of the area of interest in the format `x,y,width,height`. For example - `10,10,100,100`
              - Can be used with fo-customtransformation.
              - If this field is not specified and the file is overwritten, then customCoordinates will be removed.
        responseFields:
          type: string
          description: >
            Comma-separated values of the fields that you want the API to return in the response. 
            
            
            For example, set the value of this field to `tags,customCoordinates,isPrivateFile` to get the value of `tags`, `customCoordinates`, and `isPrivateFile` in the response.

            
            Accepts combination of `tags`, `customCoordinates`, `isPrivateFile`, `embeddedMetadata`, `customMetadata`, and `metadata`.
        extensions:
          type: string
          description: >
            Stringified JSON object with an array of extensions to be applied to the image. Refer to extensions schema in [update file API request body](/docs/api-reference/digital-asset-management-dam/managing-assets/update-file-details#request-body).
          example: [{"name":"remove-bg","options":{"add_shadow":true,"bg_colour":"green"}}, {"name":"google-auto-tagging","maxTags":5,"minConfidence":95}]
        webhookUrl:
          type: string
          description: >
            The final status of pending extensions will be sent to this URL.
        overwriteFile:
          type: string
          default: true
          description: >
            If `false` and `useUniqueFileName` is also `false`, and a file already exists at the exact location, upload API will return an error immediately.
        overwriteAITags:
          type: string
          default: true
          description: >
            If set to `true` and a file already exists at the exact location, its AITags will be removed. Set `overwriteAITags` to `false` to preserve AITags.
          enum:
            - true
            - false
        overwriteTags:
          type: string
          default: true
          description: >
            If the request does not have `tags`, and a file already exists at the exact location, existing tags will be removed.
          enum:
            - true
            - false
        overwriteCustomMetadata:
          type: string
          default: true
          description: >
            If the request does not have `customMetadata`, and a file already exists at the exact location, existing customMetadata will be removed.
          enum:
            - true
            - false
        customMetadata:
          type: string
          description: >
            Stringified JSON key-value data to be associated with the asset.
          example: {"brand":"Nike", "color":"red"}
        transformation:
          type: string
          description: >
            Stringified JSON object with properties for pre and post transformations:
            
            
            `pre` - Accepts a "string" containing a valid transformation used for requesting a pre-transformation for an image or a video file.
            
            
            `post` - Accepts an array of objects with properties:
              - `type`: One of `transformation`, `gif-to-video`, `thumbnail`, or `abs` (Adaptive bitrate streaming).
              - `value`: A "string" corresponding to the required transformation. Required if `type` is `transformation` or `abs`. Optional if `type` is `gif-to-video` or `thumbnail`.
              - `protocol`: Either `hls` or `dash`, applicable only if `type` is `abs`.
            
            Read more about [Adaptive bitrate streaming (ABS)](/docs/adaptive-bitrate-streaming).
          example: '{"pre": "width:300,height:300,quality:80", "post": [{"type": "thumbnail", "value": "width:100,height:100"}]}'
    ClientSideUploadV2:
      type: object
      title: Client side file upload
      required:
        - file
        - fileName
        - token
      properties:
        file:
          type: string
          description: >
            This field accepts three kinds of values:
            
            
              - `binary` - You can send the content of the file as binary. This is used when a file is being uploaded from the browser.
              - `base64` - Base64 encoded string of file content.
              - `url` - URL of the file from where to download the content before uploading.
            
            Note: When passing a URL in the file parameter, please ensure that our servers can access the URL. In case ImageKit is unable to download the file from the specified URL, a `400` error response is returned. This will also result in a `400` error if the file download request is aborted if response headers are not received in 8 seconds.
          example: "https://www.example.com/rest-of-the-image-path.jpg"
        fileName:
          type: string
          description: >
            The name with which the file has to be uploaded.
        token:
          type: string
          required: true
          description: >
            This is the client-generated JSON Web Token (JWT). The ImageKit.io server uses it to authenticate and check that the upload request parameters have not been tampered with after the token has been generated. Learn how to create the token on the page below.



            **Note**: Sending a JWT that has been used in the past will result in a validation error. Even if your previous request resulted in an error, you should always send a new token.



            **⚠️Warning**: JWT must be generated on the server-side because it is generated using your account's private API key. This field is required for authentication when uploading a file from the client-side.
        useUniqueFileName:
          type: string
          default: true
          description: >
            Whether to use a unique filename for this file or not.
            
            
            If `true`, ImageKit.io will add a unique suffix to the filename parameter to get a unique filename.
            
            
            If `false`, then the image is uploaded with the provided filename parameter, and any existing file with the same name is replaced.
          enum:
            - true
            - false
        tags:
          type: string
          description: >
            Set the tags while uploading the file.
            
            
            Comma-separated value of tags in the format `tag1,tag2,tag3`.
            The maximum length of all characters should not exceed 500. `%` is not allowed.
            
            
            If this field is not specified and the file is overwritten then the tags will be removed.
          example: "t-shirt,round-neck,men"
        folder:
          type: string
          description: >
            The folder path in which the image has to be uploaded. If the folder(s) didn't exist before, a new folder(s) is created. Using multiple `/` creates a nested folder.
          default: "/"
        isPrivateFile:
          type: string
          default: false
          description: >
            Whether to mark the file as private or not.
            
            
            If `true`, the file is marked as private and is accessible only using named transformation or signed URL.
          enum:
            - true
            - false
        isPublished:
          type: string
          default: true
          description: >
            Whether to upload file as published or not.
            
            
            If `false`, the file is marked as unpublished, which restricts access to the file only via the media library. Files in draft or unpublished state can only be publicly accessed after being published.
            
            
            The option to upload in draft state is only available in custom enterprise pricing plans.
          enum:
            - true
            - false
        customCoordinates:
          type: string
          description: >
            Define an important area in the image. This is only relevant for image type files.

              - To be passed as a string with the x and y coordinates of the top-left corner, and width and height of the area of interest in the format `x,y,width,height`. For example - `10,10,100,100`
              - Can be used with fo-customtransformation.
              - If this field is not specified and the file is overwritten, then customCoordinates will be removed.
        responseFields:
          type: string
          description: >
            Comma-separated values of the fields that you want the API to return in the response. 
            
            
            For example, set the value of this field to `tags,customCoordinates,isPrivateFile` to get the value of `tags`, `customCoordinates`, and `isPrivateFile` in the response.

            
            Accepts combination of `tags`, `customCoordinates`, `isPrivateFile`, `embeddedMetadata`, `customMetadata`, and `metadata`.
        extensions:
          type: string
          description: >
            Stringified JSON object with an array of extensions to be applied to the image. Refer to extensions schema in [update file API request body](/docs/api-reference/digital-asset-management-dam/managing-assets/update-file-details#request-body).
          example: [{"name":"remove-bg","options":{"add_shadow":true,"bg_colour":"green"}}, {"name":"google-auto-tagging","maxTags":5,"minConfidence":95}]
        webhookUrl:
          type: string
          description: >
            The final status of pending extensions will be sent to this URL.
        overwriteFile:
          type: string
          default: true
          description: >
            If `false` and `useUniqueFileName` is also `false`, and a file already exists at the exact location, upload API will return an error immediately.
        overwriteAITags:
          type: string
          default: true
          description: >
            If set to `true` and a file already exists at the exact location, its AITags will be removed. Set `overwriteAITags` to `false` to preserve AITags.
          enum:
            - true
            - false
        overwriteTags:
          type: string
          default: true
          description: >
            If the request does not have `tags`, and a file already exists at the exact location, existing tags will be removed.
          enum:
            - true
            - false
        overwriteCustomMetadata:
          type: string
          default: true
          description: >
            If the request does not have `customMetadata`, and a file already exists at the exact location, existing customMetadata will be removed.
          enum:
            - true
            - false
        customMetadata:
          type: string
          description: >
            Stringified JSON key-value data to be associated with the asset.
          example: {"brand":"Nike", "color":"red"}
        transformation:
          type: string
          description: >
            Stringified JSON object with properties for pre and post transformations:
            
            
            `pre` - Accepts a "string" containing a valid transformation used for requesting a pre-transformation for an image or a video file.
            
            
            `post` - Accepts an array of objects with properties:
              - `type`: One of `transformation`, `gif-to-video`, `thumbnail`, or `abs` (Adaptive bitrate streaming).
              - `value`: A "string" corresponding to the required transformation. Required if `type` is `transformation` or `abs`. Optional if `type` is `gif-to-video` or `thumbnail`.
              - `protocol`: Either `hls` or `dash`, applicable only if `type` is `abs`.
            
            Read more about [Adaptive bitrate streaming (ABS)](/docs/adaptive-bitrate-streaming).
          example: '{"pre": "width:300,height:300,quality:80", "post": [{"type": "thumbnail", "value": "width:100,height:100"}]}'
    ServerSideUploadV2:
      type: object
      title: Server side file upload
      required:
        - file
        - fileName
      properties:
        file:
          type: string
          description: >
            This field accepts three kinds of values:
            
            
              - `binary` - You can send the content of the file as binary. This is used when a file is being uploaded from the browser.
              - `base64` - Base64 encoded string of file content.
              - `url` - URL of the file from where to download the content before uploading.
            
            Note: When passing a URL in the file parameter, please ensure that our servers can access the URL. In case ImageKit is unable to download the file from the specified URL, a `400` error response is returned. This will also result in a `400` error if the file download request is aborted if response headers are not received in 8 seconds.
          example: "https://www.example.com/rest-of-the-image-path.jpg"
        fileName:
          type: string
          description: >
            The name with which the file has to be uploaded.
        useUniqueFileName:
          type: string
          default: true
          description: >
            Whether to use a unique filename for this file or not.
            
            
            If `true`, ImageKit.io will add a unique suffix to the filename parameter to get a unique filename.
            
            
            If `false`, then the image is uploaded with the provided filename parameter, and any existing file with the same name is replaced.
          enum:
            - true
            - false
        tags:
          type: string
          description: >
            Set the tags while uploading the file.
            
            
            Comma-separated value of tags in the format `tag1,tag2,tag3`.
            The maximum length of all characters should not exceed 500. `%` is not allowed.
            
            
            If this field is not specified and the file is overwritten then the tags will be removed.
          example: "t-shirt,round-neck,men"
        folder:
          type: string
          description: >
            The folder path in which the image has to be uploaded. If the folder(s) didn't exist before, a new folder(s) is created. Using multiple `/` creates a nested folder.
          default: "/"
        isPrivateFile:
          type: string
          default: false
          description: >
            Whether to mark the file as private or not.
            
            
            If `true`, the file is marked as private and is accessible only using named transformation or signed URL.
          enum:
            - true
            - false
        isPublished:
          type: string
          default: true
          description: >
            Whether to upload file as published or not.
            
            
            If `false`, the file is marked as unpublished, which restricts access to the file only via the media library. Files in draft or unpublished state can only be publicly accessed after being published.
            
            
            The option to upload in draft state is only available in custom enterprise pricing plans.
          enum:
            - true
            - false
        customCoordinates:
          type: string
          description: >
            Define an important area in the image. This is only relevant for image type files.

              - To be passed as a string with the x and y coordinates of the top-left corner, and width and height of the area of interest in the format `x,y,width,height`. For example - `10,10,100,100`
              - Can be used with fo-customtransformation.
              - If this field is not specified and the file is overwritten, then customCoordinates will be removed.
        responseFields:
          type: string
          description: >
            Comma-separated values of the fields that you want the API to return in the response. 
            
            
            For example, set the value of this field to `tags,customCoordinates,isPrivateFile` to get the value of `tags`, `customCoordinates`, and `isPrivateFile` in the response.

            
            Accepts combination of `tags`, `customCoordinates`, `isPrivateFile`, `embeddedMetadata`, `customMetadata`, and `metadata`.
        extensions:
          type: string
          description: >
            Stringified JSON object with an array of extensions to be applied to the image. Refer to extensions schema in [update file API request body](/docs/api-reference/digital-asset-management-dam/managing-assets/update-file-details#request-body).
          example: [{"name":"remove-bg","options":{"add_shadow":true,"bg_colour":"green"}}, {"name":"google-auto-tagging","maxTags":5,"minConfidence":95}]
        webhookUrl:
          type: string
          description: >
            The final status of pending extensions will be sent to this URL.
        overwriteFile:
          type: string
          default: true
          description: >
            If `false` and `useUniqueFileName` is also `false`, and a file already exists at the exact location, upload API will return an error immediately.
        overwriteAITags:
          type: string
          default: true
          description: >
            If set to `true` and a file already exists at the exact location, its AITags will be removed. Set `overwriteAITags` to `false` to preserve AITags.
          enum:
            - true
            - false
        overwriteTags:
          type: string
          default: true
          description: >
            If the request does not have `tags`, and a file already exists at the exact location, existing tags will be removed.
          enum:
            - true
            - false
        overwriteCustomMetadata:
          type: string
          default: true
          description: >
            If the request does not have `customMetadata`, and a file already exists at the exact location, existing customMetadata will be removed.
          enum:
            - true
            - false
        customMetadata:
          type: string
          description: >
            Stringified JSON key-value data to be associated with the asset.
          example: {"brand":"Nike", "color":"red"}
        transformation:
          type: string
          description: >
            Stringified JSON object with properties for pre and post transformations:
            
            
            `pre` - Accepts a "string" containing a valid transformation used for requesting a pre-transformation for an image or a video file.
            
            
            `post` - Accepts an array of objects with properties:
              - `type`: One of `transformation`, `gif-to-video`, `thumbnail`, or `abs` (Adaptive bitrate streaming).
              - `value`: A "string" corresponding to the required transformation. Required if `type` is `transformation` or `abs`. Optional if `type` is `gif-to-video` or `thumbnail`.
              - `protocol`: Either `hls` or `dash`, applicable only if `type` is `abs`.
            
            Read more about [Adaptive bitrate streaming (ABS)](/docs/adaptive-bitrate-streaming).
          example: '{"pre": "width:300,height:300,quality:80", "post": [{"type": "thumbnail", "value": "width:100,height:100"}]}'
    RemovedotBGExtensionRequest:
      title: Remove background
      type: object
      required:
        - name
      properties:
        name:
          type: string
          enum: ['remove-bg']
          description: Specifies the background removal extension.
        options:
          type: object
          properties:
            add_shadow:
              type: boolean
              description: >
                Whether to add an artificial shadow to the result. Default is false.
                Note: Adding shadows is currently only supported for car photos.
              default: false
            semitransparency:
              type: boolean
              description: >
                Allows semi-transparent regions in the result. Default is true.
                Note: Semitransparency is currently only supported for car windows.
              default: true
            bg_color:
              type: string
              description: >
                Specifies a solid color background using hex code (e.g., "81d4fa", "fff") or color name (e.g., "green").
                If this parameter is set, `bg_image_url` must be empty.
            bg_image_url:
              type: string
              description: >
                Sets a background image from a URL. If this parameter is set, `bg_color` must be empty.
    AutoTaggingExtensionRequest:
      title: Auto tagging
      type: object
      required:
        - name
        - minConfidence
        - maxTags
      properties:
        name:
          type: string
          enum: ['google-auto-tagging', 'aws-auto-tagging']
          description: Specifies the auto-tagging extension used.
        minConfidence:
          type: integer
          description: Minimum confidence level for tags to be considered valid.
        maxTags:
          type: integer
          description: Maximum number of tags to attach to the asset.
  responses:  
    RateLimitExceeded:
      description: The request exceeded the rate limit. Contains headers indicating the limits and a message detailing the error.
      headers:
        X-RateLimit-Limit:
          schema:
            type: integer
          description: The maximum number of requests that can be made to this endpoint in the interval specified by `X-RateLimit-Interval` response header.
        X-RateLimit-Reset:
          schema:
            type: integer
          description: The amount of time in milliseconds before you can make another request to this endpoint. Pause/sleep your workflow for this duration.
        X-RateLimit-Interval:
          schema:
            type: integer
          description: The duration of the interval in milliseconds for which this rate limit was exceeded.
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: A description of the error, providing details about why the rate limit has been exceeded.
    Unauthorized:
      description: Unauthorized request.
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Your request does not contain private API key.
              help:
                type: string
                example: For support kindly contact us at support@imagekit.io.
    Forbidden:
      description: Forbidden.
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                examples: 
                  - Your account cannot be authenticated.
                  - Your request contains expired private API key.
                  - Your account is disabled.
              help:
                type: string
                example: For support kindly contact us at support@imagekit.io.
  examples: {}
  securitySchemes:
    basicAuth:
      description: >-
        Basic HTTP authentication.

        
        Provide base64 encoded value of the string `your_private_api_key:`.
        
        
        Notice the colon (:) after the private key. It is required otherwise, authentication will fail. The format is `username:password`. `username` is your private key and `password` is an empty string.

        
        If you encode `your_private_api_key:` using base64, you will get `eW91cl9wcml2YXRlX2FwaV9rZXk6`.

        
        `Authorization: Basic eW91cl9wcml2YXRlX2FwaV9rZXk6`
      scheme: basic
      type: http
security:
  - basicAuth: []
