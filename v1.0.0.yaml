openapi: 3.1.0
info:
  title: ImageKit API
  version: 1.0.0
  description: |-
    # Introduction

    ImageKit.io offers REST API so that you can programmatically integrate ImageKit.io into your application.

    The API documentation will start with a general overview of the design and technology that has been implemented, followed by reference information about specific endpoints.
    
    ## Request and response
    
    Except for the upload file API, all our APIs accept JSON-encoded request bodies and return JSON-encoded responses. Requests should be made using only HTTPS protocol so that traffic is encrypted.
    
    ## Run in Postman
    We've created a [Postman collection](https://app.getpostman.com/run-collection/e8afe4815e95f8b14660) to make testing and working with our API simpler.
    
    ## Error codes
    
    ImageKit.io API uses standard HTTP error codes.

    | Error code                | Description                                                                                                                                                                                                                                                                                                                                                                                                        |
    |---------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | **2xx**<br>OK            | Everything worked as expected.                                                                                                                                                                                                                                                                                                                                                                                     |
    | **400**<br>Bad request   | The request was unacceptable, often due to missing or invalid parameter(s). In this case, a JSON-encoded error response is returned with the `message` property. `message` contains the details about the error and possible solution.                                                                                                                                                                             |
    | **401**<br>Unauthorized | No valid API key was provided.                                                                                                                                                                                                                                                                                                                                                                                     |
    | **403**<br>Forbidden     | This can be for the following reasons, which will be indicated in the `message` field in the response: <ul><li>ImageKit could not authenticate your account with the keys provided.</li><li>An expired key (public or private) was used with the request.</li><li>The account is disabled.</li><li>If you are using the upload API, the total storage limit (or upload limit) is exceeded.</li></ul> |
    | **429**<br>Too Many Requests | Too many requests hit the API too quickly. We recommend you throttle the request rate as per the value of `X-RateLimit-Limit` and `X-RateLimit-Reset` response headers and stay within [rate limits](#rate-limits).                                                                                                                                                                                           |
    | **500, 502, 503, 504**<br>Server error | Something went wrong with ImageKit.io API. Please create a support ticket by emailing us at [support@imagekit.io](mailto:support@imagekit.io).                                                                                                                                                                                                                                              |
    
    ## Request ID (x-ik-requestId)

    All API responses contain a `x-ik-requestId` header. The value of this header is a unique identifier associated with the API request. If you face any issues with any API, then provide this header value in your support ticket to help us troubleshoot the issue quickly.
    
    # Rate Limits

    Except for the upload API, all our APIs are rate-limited to protect our infrastructure from excessive request rates and to keep ImageKit.io fast and stable for everyone.
    
    Rate limiting is done across the account. When you exceed the rate limits for an endpoint, you will receive a `429` (Too many requests) response code.
    
    If you receive a response status code of 429 (Too Many Requests), please sleep/pause for the number of milliseconds specified by the value of `X-RateLimit-Reset` response header before making additional requests to that endpoint.
    
    ## Interval window
    
    Rate limits are specified for a specific interval. So, if an endpoint allows 100 requests per second (1000 milliseconds), and you exceed this rate, your application will receive a 429 response code. As explained below, every endpoint can have different limits, which are exposed via rate-limiting headers.
    
    A single endpoint can have multiple limits, for example, a 100 request per second limit along with 1000 limits for a 15-minute duration.
    
    ## Response headers to understand rate limits
    
    In response to every API request, you will also receive the following response headers. Use these headers to stay within rate limits or pause/sleep your workflow in case you exceed the limits.
    
    | Response header                              | Description                                                                                                                                                     |
    | -------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------- |
    | <p><code>X-RateLimit-Limit</code><br></p>    | <p>The maximum number of requests that can be made to this endpoint in the interval specified <br>by <code>X-RateLimit-Interval</code> response header.<br></p> |
    | `X-RateLimit-Reset`                          | The amount of time in milliseconds before you can make another request to this endpoint. Pause/sleep your workflow for this duration.                          |
    | <p><code>X-RateLimit-Interval</code><br></p> | The duration of the interval in milliseconds for which this rate limit was exceeded.                                                                                |
    
    ## Request higher rate limits
    
    If your workflow demands a higher rate limit, please reach out to us at [support@imagekit.io](mailto:support@imagekit.io).
    
    # API keys
    
    ImageKit authenticates your API requests using your account's API keys. If you don't include your key when making an API request or use an incorrect or outdated one, we return an error.
    
    ## Types of keys

    - Standard keys: A standard API key has read and write access to all the APIs listed above.
    - Restricted key: A restricted API key allows only the minimum [level of access](#resource-list) that you specify across all the APIs listed above. The three access levels are: `None`, `Read only`, and `Read and write`. For example, if you set `Read only` permission for media access for your restricted key, you cannot use it to perform any upload, update, or delete operation. You can only perform operations like list and search files, get file details, get file metadata, etc.
    
    ## Obtaining your API keys

    [View](https://imagekit.io/dashboard/developer/api-keys) your API keys in the ImageKit.io dashboard in the **API keys** section under the **Developer options** tab. Every account has one pair of standard public and private keys by default.
    
    ![The API keys section in Developer options](https://ikmedia.imagekit.io/docs_images/api-reference/api-introduction/webhooks/obtain-api-key_AzXoqM0WE.webp?updatedAt=1708938427076)
    
    ### **Public key**

    This is used to identify your account in certain client-side file upload implementations. It is not meant to be secret, and you can publish this in client-side Javascript code or an Android or iPhone app.
    
    ### **Private key**
    
    This should be kept confidential and only stored on your servers. A private key is used to authenticate your account when you make an API request.
    
    ## Keeping your keys safe
    
    It is strongly recommended to keep your private key safe and confidential. To help keep your API keys secure, follow these best practices:
    
    1. Do not embed API keys directly in your code. API keys that are embedded in code can be accidentally exposed to the public. For example, you may forget to remove the keys from the code that you share. Instead of embedding your API keys in your applications, store them in environment variables or in files outside of your application's source tree.
    2. Do not store API keys in files inside your application's source tree. If you store API keys in files, keep the files outside your application's source tree to help ensure your keys do not end up in your source code control system. This is particularly important if you use a public source code management system such as GitHub.
    
    ## Rolling keys
    
    If an API key is compromised, you should roll that pair immediately and start using the newly generated keys. The newly generated pair has the same resource access permissions as the old one.
    
    You can choose when to expire the existing key:
    
    - Immediately
    - In 1 hour
    - In 24 hours
    - In 3 days
    - In 7 days
    
    The expiry period you choose blocks and expires the existing key after the time period you specify. Regardless of the expiry period, you can use the new key immediately.
    
    ![Roll API keys](https://ikmedia.imagekit.io/docs_images/api-reference/api-introduction/webhooks/roll-api-key_uO_qlGz6W.webp?updatedAt=1708938427339)
    
    ## Deleting keys
    
    You can delete any existing API key in your account. However, your account will always have at least one pair of active standard keys.
    
    ## Revealing keys
    
    By default, the private key is masked for security reasons. You can click on the reveal icon next to the private key and enter your password to authorize and reveal the private keys.
    
    ## Restricted API keys
    
    You can:
    
    - Create a new restricted API key and specify its resource access permissions.
    - Update resource access permissions on any existing restricted API keys.
    
    ![Create restricted API keys](https://ikmedia.imagekit.io/docs_images/api-reference/api-introduction/webhooks/create-restricted-api-key_MOyq1TUOLz.webp?updatedAt=1708938427413)
    
    The three access levels across any resource are: `None`, `Read only`, and `Read and write`.
    
    ### Resource list
    
    - Media access: Permissions for operations on Upload, Media management, File metadata, and Custom metadata management APIs.
    
    | Permission level   | APIs|
    | ------------------ ||
    | **None**           | No APIs|
    | **Read**           | [List and search files](../media-api/list-and-search-files.md) <br/> [Get file details](../media-api/get-file-details.md) <br/> [Get file version details](../media-api/get-file-version-details.md) <br/> [Get file versions](../media-api/get-file-versions.md) <br/> [Bulk job status](../media-api/copy-move-folder-status.md) <br/> [Purge cache status](../media-api/purge-cache-status.md) <br/> [Get image metadata for uploaded media files](../metadata-api/get-image-metadata-for-uploaded-media-files.md) <br/> [Get image metadata from remote URL](../metadata-api/get-image-metadata-from-remote-url.md) <br/> [Get custom metadata field](../custom-metadata-fields-api/get-custom-metadata-field.md)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           |
    | **Read and write** | All APIs under read permission <br/> [Server side file upload](../upload-file-api/server-side-file-upload.md) <br/> [Client side file upload](../upload-file-api/client-side-file-upload.md) <br> [Secure client side file upload](../upload-file-api/secure-client-side-file-upload.md) <br/> <br/> [Update file details](../media-api/update-file-details.md) <br/> [Add tags (bulk)](../media-api/add-tags-bulk.md) <br/>[Remove tags (bulk)](../media-api/remove-tags-bulk.md) <br/>[Remove AITags (bulk)](../media-api/remove-aitags-bulk.md)<br/> [Delete file](../media-api/delete-file.md) <br/> [Delete file version](../media-api/delete-file-version.md) <br/>[Delete files (bulk)](../media-api/delete-files-bulk.md)<br/>[Copy file](../media-api/copy-file.md)<br/>[Move file](../media-api/move-file.md)<br/>[Rename file](../media-api/rename-file.md)<br/>[Restore file version](../media-api/restore-file-version.md)<br/>[Create folder](../media-api/create-folder.md)<br/>[Delete folder](../media-api/delete-folder.md)<br/>[Copy folder](../media-api/copy-folder.md)<br/>[Move folder](../media-api/move-folder.md)<br/>[Purge cache](../media-api/purge-cache.md)<br/> [Create custom metadata field](../custom-metadata-fields-api/create-custom-metadata-field.md) <br/>[Update custom metadata field](../custom-metadata-fields-api/update-custom-metadata-field.md) <br/>[Delete custom metadata field](../custom-metadata-fields-api/delete-custom-metadata-field.md) |

    # Webhooks
    
    Imagekit uses webhooks to notify your application when an event happens in your account. Webhooks are particularly useful for asynchronous events such as video encoding and extension processing during upload.
    
    ## Steps to receive webhooks
    
    1. Configure the webhook in your ImageKit dashboard.
    2. Create a webhook endpoint as an HTTP endpoint (URL) on your server.
    3. Handle requests from ImageKit by parsing each event object and returning `2xx` response status codes.
    
    ## How to configure a Webhook?
    
    Go to [developer options](https://imagekit.io/dashboard/developer) in the ImageKit dashboard. Under Webhooks, you will see the list of webhook endpoints configured.
    
    Click on the "Add new" button to create a new webhook endpoint.
    
    ![Create new webhook endpoint](https://ikmedia.imagekit.io/docs_images/api-reference/api-introduction/webhooks/create-new-webhook-endpoint_yWUV8YlGH.png?updatedAt=1686574767184)
    
    Enter a valid HTTP(S) endpoint and click on "Create".
    
    ![Create webhook form](https://ikmedia.imagekit.io/docs_images/api-reference/api-introduction/webhooks/create-webhook-form_RReNm7PTo.png?updatedAt=1686574767769)
    
    You should see the webhook endpoint in the list now.
    
    ![Webhook endpoint lists](https://ikmedia.imagekit.io/docs_images/api-reference/api-introduction/webhooks/webhook-endpoint-lists_vH5I4Faas.png?updatedAt=1686574771585)
    
    To update an existing endpoint, click on `...` and change the status.
    
    ![Update webhook endpoint](https://ikmedia.imagekit.io/docs_images/api-reference/api-introduction/webhooks/update-webhook-endpoint_zNy-RSmmp.png?updatedAt=1686574771887)
    
    ## Listen to Webhook
    
    Use a tool like [Ngrok](https://ngrok.com/) to make your webhook endpoint publicly accessible for testing webhook implementation.
    
    All webhook bodies are JSON encoded. The schema of the body may differ based on the event type, but the following fields are common.
    
    | Field     | DataType | Description                              |
    |-----------|----------|------------------------------------------|
    | type      | `string` | Type of event.                           |
    | id        | `string` | Unique identifier of the event.          |
    | createdAt | `string` | Timestamp of the event in ISO8601 format.|
    | data      | `JSON`   | Actual event payload in JSON format.  |
    
    ## Verify webhook signature
    
    Webhook endpoints are publicly accessible, therefore it is essential to filter out malicious requests. We recommend using the webhook signature to verify the authenticity of the webhook request and payload.
    
    To achieve this, Imagekit sends the signature in the `x-ik-signature` request header in every webhook request. In your backend, you can generate the same signature using the [webhook secret](https://imagekit.io/dashboard/developer/webhooks) and compare it with the header value.
    
    Keep webhook secret secure in your backend stored in an environment variable.
    
    ### Verify signature with ImageKit SDK
    
    You can use imagekit SDK to verify & parse webhook request payload.
    
    Example code using [ImageKit Node.js SDK](https://github.com/imagekit-developer/imagekit-nodejs):
    
    ```javascript
    const express = require('express');
    const Imagekit = require('imagekit');
    
    // Webhook configs
    const WEBHOOK_SECRET = 'whsec_...'; // Copy from Imagekit dashboard
    const WEBHOOK_EXPIRY_DURATION = 300 * 1000; // 300 seconds for example
    
    const imagekit = new Imagekit({
      publicKey: 'public_...',
      urlEndpoint: 'https://ik.imagekit.io/imagekit_id',
      privateKey: 'private_...',
    })
    
    const app = express();
    
    app.post('/webhook', express.raw({ type: 'application/json' }), (req, res) => {
        const signature = req.headers["x-ik-signature"];
        const requestBody = req.body;
        let webhookResult;
        try {
            webhookResult = imagekit.verifyWebhookEvent(requestBody, signature, WEBHOOK_SECRET);
        } catch (e) {
            // `verifyWebhookEvent` method will throw an error if signature is invalid
            console.log(e);
            res.status(400).send(`Webhook Error`);
        }
    
        const { timestamp, event } = webhookResult;
    
        // Check if webhook has expired
        if (timestamp + WEBHOOK_EXPIRY_DURATION < Date.now()) {
            res.status(400).send(`Webhook Error`);
        }
    
        // Handle webhook
        switch (event.type) {
            case 'video.transformation.accepted':
                // It is triggered when a new video transformation request is accepted for processing. You can use this for debugging purposes.
                break;
            case 'video.transformation.ready':
                // It is triggered when a video encoding is finished, and the transformed resource is ready to be served. You should listen to this webhook and update any flag in your database or CMS against that particular asset so your application can start showing it to users.
                break;
            case 'video.transformation.error':
                // It is triggered if an error occurs during encoding. Listen to this webhook to log the reason. You should check your origin and URL-endpoint settings if the reason is related to download failure. If the reason seems like an error on the ImageKit side, then raise a support ticket at support@imagekit.io.
                break;
            default:
                // ... handle other event types
                console.log(`Unhandled event type ${event.type}`);
        }
    
        // Return a response to acknowledge receipt of the event
        res.send();
    })
    
    app.listen(3000, () => {
        console.log(`Example app listening on port 3000`)
    })
    ```
    
    ### Verify signature manually
    
    Imagekit webhook request contains a `x-ik-signature` header like this:
    
    ```txt
    x-ik-signature: t=1655795539264,v1=b6bc2aa82491c32f1cbef0eb52b7ffaa51467ea65a03b5d4ccdcfb9e0941c946
    ```
    
    - The Timestamp of the signature is a Unix timestamp in milliseconds, prefixed with `t=`.
    - The HMAC signature is prefixed with `v1=`.
    
    Once you have retrieved the webhook signature from the request header & raw request body, you can verify the authenticity of the webhook request in the following steps:
    
    **Step 1:** Extract each item from the `x-ik-signature`, by splitting on `,` separator.
    
    ```javascript
    items = 't=1655795539264,v1=b6bc2aa82491c32f1cbef0eb52b7ffaa51467ea65a03b5d4ccdcfb9e0941c946'.split(',')
    // [ 't=1655795539264', 'v1=b6bc2aa82491c32f1cbef0eb52b7ffaa51467ea65a03b5d4ccdcfb9e0941c946' ]
    ```
    
    **Step 2:** Extract timestamp.
    
    ```javascript
    timestamp = 't=1655795539264'.split('=')[1]
    // '1655795539264'
    ```
    
    **Step 3:** Extract signature encoded as a hex string.
    
    ```javascript
    signature = 'v1=b6bc2aa82491c32f1cbef0eb52b7ffaa51467ea65a03b5d4ccdcfb9e0941c946'.split('=')[1]
    // 'b6bc2aa82491c32f1cbef0eb52b7ffaa51467ea65a03b5d4ccdcfb9e0941c946'
    ```
    
    **Step 4:** Compute the HMAC hash using the webhook secret, signature timestamp, and raw request body.
    
    - The HAMC key is the webhook secret.
    - HMAC payload is formed by concatenating the Timestamp (as numeric string), character `.`, and raw request body (encoded as UTF8 string).
    - Use the SHA256 algorithm to compute the HMAC hash.
    - HMAC hash is encoded as a hex string.
    
    Here is an example in Node.js:
    
    ```javascript
    const createHmac = require("crypto").createHmac;
    var signature = createHmac('sha256', webhookSecret)
      .update(timestamp + '.' + rawRequestBody)
      .digest('hex');
    ```
    
    **Step 5:** Compare the signature with the signature received in the `x-ik-signature` header. The webhook request is valid if they are the same.
    
    ## Preventing replay attacks
    
    When an attacker intercepts a webhook request, they can replay it multiple times with a valid signature.
    
    To mitigate this, Imagekit webhook signature contains a timestamp. The Timestamp is generated before the webhook request is sent to your server.
    
    The `verifyWebhookEvent` method in ImageKit SDK returns the Timestamp & parsed event object.
    
    If the Timestamp is within the tolerance limit, the request can be considered valid, or you can reject it.
    
    Optionally, a stronger approach is to use a nonce to prevent replay attacks. You can use Event ID as a nonce, it is guaranteed to be unique across all events. You can find the event ID in `id` field of the event object.
    
    ## Sample Codes
    
    Example code using [ExpressJS](https://expressjs.com/):
    
    ```javascript
    const express = require('express');
    const Imagekit = require('imagekit');
    
    // Webhook configs
    const WEBHOOK_ENDPOINT = '/webhook';
    const WEBHOOK_SECRET = 'whsec_...'; // Copy from Imagekit dashboard
    const WEBHOOK_EXPIRY_DURATION = 60 * 1000; // 60 seconds
    
    const imagekit = new Imagekit({
      publicKey: 'public_...',
      urlEndpoint: 'https://ik.imagekit.io/imagekit_id',
      privateKey: 'private_...',
    })
    
    const app = express();
    
    app.post('/webhook', express.raw({ type: 'application/json' }), (req, res) => {
      const signature = req.headers['x-ik-signature'];
      const rawBody = req.body;
    
      // Verify webhook signature
      let webhookResult;
      try {
        webhookResult = imagekit.verifyWebhookEvent(rawBody, signature, WEBHOOK_SECRET);
      } catch (e) {
        // Failed to verify webhook
        return res.status(401).send(`Webhook error: ${e.message}`);
      }
      const { timestamp, event } = webhookResult;
    
      // Check if webhook has expired
      if (timestamp + WEBHOOK_EXPIRY_DURATION < Date.now()) {
        // Stall webhook
        return res.status(401).send('Webhook signature expired');
      }
    
      // Handle webhook
      switch (event.type) {
        case 'video.transformation.accepted':
          // It is triggered when a new video transformation request is accepted for processing. You can use this for debugging purposes.
          break;
        case 'video.transformation.ready':
          // It is triggered when a video encoding is finished, and the transformed resource is ready to be served. You should listen to this webhook and update any flag in your database or CMS against that particular asset so your application can start showing it to users.
          break;
        case 'video.transformation.error':
          // It is triggered if an error occurs during encoding. Listen to this webhook to log the reason. You should check your origin and URL-endpoint settings if the reason is related to download failure. If the reason seems like an error on the ImageKit side, then raise a support ticket at support@imagekit.io.
          break;
        // ... handle other event types
        default:
          console.log(`Unhandled event type ${event.type}`);
      }
    
      // Acknowledge webhook is received and processed successfully
      res.status(200).end();
    });
    
    app.listen(3000, () => {
      console.log("Server listening on port 3000");
      console.log(
        `Webhook endpoint: 'http://localhost:${PORT}${WEBHOOK_ENDPOINT}'`,
        'Do replace 'localhost' with public endpoint'
      );
    });
    ```
    
    Example code using Fastify:
    
    ```javascript
    const fastify = require('fastify');
    const fastifyRawBody = require('fastify-raw-body');
    const Imagekit = require('imagekit');
    
    // Webhook configs
    const WEBHOOK_ENDPOINT = '/webhook';
    const WEBHOOK_SECRET = 'whsec_...'; // Copy from Imagekit dashboard
    const WEBHOOK_EXPIRY_DURATION = 60 * 1000; // 60 seconds
    
    const imagekit = new Imagekit({
      publicKey: 'public_...',
      urlEndpoint: 'https://ik.imagekit.io/imagekit_id',
      privateKey: 'private_...',
    })
    
    const server = fastify();
    
    const startServer = async (port) => {
      // Use 'fastify-raw-body' package to retrive raw request body as utf8 string
      await server.register(fastifyRawBody, { routes: [WEBHOOK_ENDPOINT] });
    
      // Add webhook endpoint route
      server.route({
        method: 'POST',
        url: WEBHOOK_ENDPOINT,
        handler: (req, res) => {
          // Handle webhook
          const signature = req.raw.headers['x-ik-signature'];
          const rawBody = req.body;
    
          // Verify webhook signature
          let webhookResult;
          try {
            webhookResult = imagekit.verifyWebhookEvent(rawBody, signature, WEBHOOK_SECRET);
          } catch (e) {
            // Webhook verification failed
            return res.status(401).send(`Webhook error: ${e.message}`);
          }
          const { timestamp, event } = webhookResult;
    
          // Check if webhook has expired
          if (timestamp + WEBHOOK_EXPIRY_DURATION < Date.now()) {
            // Stall webhook
            return res.status(401).send('Webhook signature expired');
          }
          
          // Handle webhook
          switch (event.type) {
            case 'video.transformation.accepted':
              console.log('Video transformation request accepted');
              break;
            case 'video.transformation.ready':
              console.log('Video transformation ready');
              break;
            case 'video.transformation.error':
              console.log('Video transformation error');
              break;
          }
    
          // Acknowledge webhook is received and processed successfully
          res.status(200).send();
        },
      });
    
      await server.listen({ port });
    };
    
    startServer(3000).then(() => {
      console.log("Server listening on port 3000");
      console.log(
        `Webhook endpoint: 'http://localhost:${PORT}${WEBHOOK_ENDPOINT}'`,
        'Do replace 'localhost' with public endpoint'
      );
    });
    ```
    
    Example code using Node HTTP:
    
    ```javascript
    const http = require('http');
    const Imagekit = require('imagekit');
    
    // Webhook configs
    const WEBHOOK_ENDPOINT = '/webhook';
    const WEBHOOK_SECRET = 'whsec_...'; // Copy from Imagekit dashboard
    const WEBHOOK_EXPIRY_DURATION = 60 * 1000; // 60 seconds
    
    const imagekit = new Imagekit({
      publicKey: 'public_...',
      urlEndpoint: 'https://ik.imagekit.io/imagekit_id',
      privateKey: 'private_...',
    })
    
    const webhookRoute = (req, res) => {
      const signature = req.headers['x-ik-signature'];
      const reqChunks = [];
      req.setEncoding('utf8');
      req.on('data', (chunk) => {
        reqChunks.push(chunk);
      });
      req.on('end', () => {
        const rawBody = reqChunks.join('');
    
        // Verify webhook signature
        let webhookResult;
        try {
          webhookResult = imagekit.verifyWebhookEvent(rawBody, signature, WEBHOOK_SECRET);
        } catch (e) {
          // Webhook signature verification failed
          res.writeHead(401, `Webhook error: ${e.message}`);
          res.end();
          return;
        }
        const { timestamp, event } = webhookResult;
    
        // Check if webhook has expired
        if (timestamp + WEBHOOK_EXPIRY_DURATION < Date.now()) {
          // Stall webhook
          res.writeHead(401, 'Webhook signature expired');
          res.end();
          return;
        }
    
        // Handle webhook
        switch (event.type) {
          case 'video.transformation.accepted':
            console.log('Video transformation request accepted');
            break;
          case 'video.transformation.ready':
            console.log('Video transformation ready');
            break;
          case 'video.transformation.error':
            console.log('Video transformation error');
            break;
        }
    
        // Acknowledge webhook is received and processed successfully
        res.writeHead(200, 'OK');
        res.end();
      });
    };
    
    const server = http.createServer((req, res) => {
      switch (req.url) {
        case WEBHOOK_ENDPOINT:
          webhookRoute(req, res);
          break;
        default: {
          res.writeHead(404);
          res.end();
        }
      }
    });
    
    server.listen(3000, () => {
      console.log("Server listening on port 3000");
      console.log(
        `Webhook endpoint: 'http://localhost:${PORT}${WEBHOOK_ENDPOINT}'`,
        'Do replace 'localhost' with public endpoint'
      );
    });
    
    ```
    
    ## List of events
    
    Below is the list of events for which ImageKit calls your configured webhook.
    
    - [video.transformation.accepted](../../features/video-transformation/video-webhook-events.md#video.transformation.accepted)
    - [video.transformation.ready](../../features/video-transformation/video-webhook-events.md#video.transformation.ready)
    - [video.transformation.error](../../features/video-transformation/video-webhook-events.md#video.transformation.error)
    - [upload.pre-transform.success](../../features/pre-post-transformation/pre-post-tr-webhook-events.md#upload.pre-transform.success)
    - [upload.pre-transform.error](../../features/pre-post-transformation/pre-post-tr-webhook-events.md#upload.pre-transform.error)
    - [upload.post-transform.success](../../features/pre-post-transformation/pre-post-tr-webhook-events.md#upload.post-transform.success)
    - [upload.post-transform.error](../../features/pre-post-transformation/pre-post-tr-webhook-events.md#upload.post-transform.error)

  contact:
    email: developers@imagekit.io
    name: ImageKit Team
    url: https://imagekit.io
  termsOfService: 'https://imagekit.io/terms/'
servers:
  - url: https://api.imagekit.io
paths:
  /v1/customMetadataFields:
    post:
      summary: Create new field
      operationId: create-new-field
      description: This API creates a new custom metadata field. Once a custom metadata field is created either through this API or using the dashboard UI, its value can be set on the assets. The value of a field for an asset can be set using the media library UI or programmatically through upload or update assets API.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - label
                - schema
              properties:
                name:
                  type: string
                  description: API name of the custom metadata field. This should be unique across all (including deleted) custom metadata fields.
                label:
                  type: string
                  description: Human readable name of the custom metadata field. This should be unique across all non deleted custom metadata fields. This name is displayed as form field label to the users while setting field value on an asset in the media library UI.
                schema:
                  type: object
                  required:
                    - type
                  properties:
                    type:
                      description: Type of the custom metadata field.
                      type: string
                      enum:
                        - Text
                        - TextArea
                        - Number
                        - Date
                        - Boolean
                        - SingleSelect
                        - MultiSelect
                    selectOptions:
                      type: array
                      items: {}
                      description: |
                        An array of allowed values. This property is only required if `type` property is set to `SingleSelect` or `MultiSelect`.
                      example:
                        - small
                        - medium
                        - large
                        - 30
                        - 40
                        - true
                    defaultValue:
                      description: |
                        The default value for this custom metadata field. This property is only required if `isValueRequired` property is set to `true`. The value should match the `type` of custom metadata field.
                      oneOf:
                        - type: string
                        - type: number
                        - type: boolean
                        - type: array
                          items: {}
                          description: |
                            Default value should be of type array when custom metadata field type is set to `MultiSelect`.
                          example:
                            - true
                            - 10
                            - Hello
                    isValueRequired:
                      type: boolean
                      description: |
                        Sets this custom metadata field as required. Setting custom metadata fields on an asset will throw error if the value for all required fields are not present in upload or update asset API request body.
                    minValue:
                      description: |
                        Minimum value of the field. Only set this property if `type` is set to `Date` or `Number`.
                      oneOf:
                        - type: string
                          description: Set the minimum date in ISO8601 string format.
                        - type: number
                          description: Set the minimum numeric value.
                    maxValue:
                      description: |
                        Maximum value of the field. Only set this property if `type` is set to `Date` or `Number`.
                      oneOf:
                        - type: string
                          description: Set the maximum date in ISO8601 string format.
                        - type: number
                          description: Set the maximum numeric value.
                    minLength:
                      description: |
                        Minimum length of string. Only set this property if `type` is set to `Text` or `Textarea`.
                      type: number
                    maxLength:
                      description: |
                        Maximum length of string. Only set this property if `type` is set to `Text` or `Textarea`.
                      type: number
            example:
              name: price
              label: price
              schema:
                type: Number
                minValue: 1000
                maxValue: 3000
      responses:
        "201":
          description: Custom metadata field created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/customMetadataField"
              example:
                id: 598821f949c0a938d57563dd
                name: price
                label: price
                schema:
                  type: Number
                  minValue: 1000
                  maxValue: 3000
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Human readable error message.
                    example: A custom metadata field with this name already exists
                  help:
                    type: string
                    description: Human readable help instructions.
                    example: For support kindly contact us at support@imagekit.io .
      tags:
        - Digital Asset Management (DAM)
        - Custom metadata fields
    get:
      tags:
        - Digital Asset Management (DAM)
        - Custom metadata fields
      operationId: list-all-fields
      summary: List all fields
      description: This API returns the array of created custom metadata field objects. By default the API returns only non deleted field objects, but you can include deleted fields in the API response.
      parameters:
        - description: |
            Set it to `true` to include deleted field objects in the API response. Default value is `false`.
          in: query
          name: includeDeleted
          required: false
          schema:
            type: boolean
      responses:
        "200":
          description: Array of custom metadata field objects.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/customMetadataField"
              example:
                - id: 598821f949c0a938d57563dd
                  name: brand
                  label: brand
                  schema:
                    type: Text
                    defaultValue: Nike
                - id: 865421f949c0a835d57563dd
                  name: price
                  label: price
                  schema:
                    type: Number
                    minValue: 1000
                    maxValue: 3000
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Your request does not contain private API key.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io .
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Your account cannot be authenticated.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io .
  /v1/files/{fileId}/details:
    get:
      tags:
        - Digital Asset Management (DAM)
        - Managing assets
      operationId: get-file-details
      summary: Get file details
      description: This API returns an object with details or attributes about the current version of the file.
      parameters:
        - description: |
            The unique `fileId` of the uploaded file. `fileId` is returned in the list and search assets API and upload API.
          in: path
          name: fileId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: File details object.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/fileDetails"
              example:
                fileId: 598821f949c0a938d57563bd
                type: file
                name: file.jpg
                filePath: /images/products/file.jpg
                tags:
                  - t-shirt
                  - round-neck
                  - sale2019
                AITags:
                  - name: Shirt
                    confidence: 90.12
                    source: google-auto-tagging
                  - name: T-shirt
                    confidence: 80.12
                    source: aws-auto-tagging
                versionInfo:
                  id: 598821f949c0a938d57563bd
                  name: Version 1
                isPrivateFile: false
                customCoordinates: null
                url: https://ik.imagekit.io/your_imagekit_id/images/products/file.jpg
                thumbnail: https://ik.imagekit.io/your_imagekit_id/tr:n-ik_ml_thumbnail/images/products/file.jpg
                fileType: image
                mime: image/jpeg
                width: 100
                height: 100
                size: 100
                hasAlpha: false
                customMetadata:
                  brand: Nike
                  color: red
                createdAt: "2019-08-24T06:14:41.313Z"
                updatedAt: "2019-08-24T06:14:41.313Z"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Your request does not contain private API key.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io .
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Your account cannot be authenticated.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io .
        "404":
          description: File not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: The requested file does not exist.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io .
    patch:
      tags:
        - Digital Asset Management (DAM)
        - Managing assets
      operationId: update-file-details
      summary: Update file details
      description: |
        This API updates the details or attributes of the current version of the file. You can update `tags`, `customCoordinates`, `customMetadata`, remove existing `AITags` and apply extensions using this API.
      parameters:
        - description: |
            The unique `fileId` of the uploaded file. `fileId` is returned in list and search assets API and upload API.
          in: path
          name: fileId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                removeAITags:
                  oneOf:
                    - type: array
                      items:
                        type: string
                    - type: string
                      enum: ["all"]
                  description: |
                    An array of AITags associated with the file that you want to remove, e.g. `["car", "vehicle", "motorsports"]`. If you want to remove all AITags associated with the file, send a string - "all".

                    Note: The remove operation for `AITags` executes before any of the `extensions` are processed.
                webhookUrl:
                  type: string
                  description: |
                    The final status of pending extensions will be sent to this URL.
                extensions:
                  type: array
                  items:
                    type: object
                  description: |
                    Array of extensions to be processed on the asset.

                    Note: The Remove.bg extension creates a new file version that will also have the updated file details.
                tags:
                  oneOf:
                    - type: array
                      items:
                        type: string
                    - nullable: true
                  description: |
                    An array of tags associated with the file, e.g. `["tag1", "tag2"]`. If you want to unset it send, `null`.
                customCoordinates:
                  oneOf:
                    - type: string
                    - nullable: true
                  description: |
                    Define an important area in the image in the format `x,y,width,height` e.g. `10,10,100,100`. If you want to unset this send `null`.
                customMetadata:
                  type: object
                  description: |
                    A key-value data to be associated with the asset. To unset a key, send `null` value for that key. Before setting any custom metadata on an asset you have to create the field using custom metadata fields API.
            example:
              removeAITags: ["car", "vehicle", "motorsports"]
              webhookUrl: https://webhook.site/0d6b6c7a-8e5a-4b3a-8b7c-0d6b6c7a8e5a
              extensions:
                [
                  { "name": "remove-bg", "options": { "add_shadow": true } },
                  {
                    "name": "google-auto-tagging",
                    "minConfidence": 80,
                    "maxTags": 10,
                  },
                  {
                    "name": "aws-auto-tagging",
                    "minConfidence": 80,
                    "maxTags": 10,
                  },
                ]
              tags: ["tag1", "tag2"]
              customCoordinates: "10,10,100,100"
              customMetadata: { "brand": "Nike", "color": "red" }
      responses:
        "200":
          description: Updated file details object.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/fileDetails"
                  - type: object
                    properties:
                      extensionStatus:
                        type: object
                        properties:
                          google-auto-tagging:
                            type: string
                            enum: ["success", "pending", "failed"]
                          aws-auto-tagging:
                            type: string
                            enum: ["success", "pending", "failed"]
                          remove-bg:
                            type: string
                            enum: ["success", "pending", "failed"]
              example:
                fileId: 598821f949c0a938d57563bd
                type: file
                name: file1.jpg
                filePath: /images/products/file.jpg
                tags:
                  - t-shirt
                  - round-neck
                  - sale2019
                AITags:
                  - name: Shirt
                    confidence: 90.12
                    source: google-auto-tagging
                  - name: T-shirt
                    confidence: 80.12
                    source: aws-auto-tagging
                versionInfo:
                  id: 598821f949c0a938d57563bd
                  name: Version 1
                isPrivateFile: false
                customCoordinates: null
                url: https://ik.imagekit.io/your_imagekit_id/images/products/file.jpg
                thumbnail: https://ik.imagekit.io/your_imagekit_id/tr:n-ik_ml_thumbnail/images/products/file.jpg
                fileType: image
                mime: image/jpeg
                width: 100
                height: 100
                size: 100
                hasAlpha: false
                customMetadata:
                  brand: Nike
                  color: red
                createdAt: "2019-08-24T06:14:41.313Z"
                updatedAt: "2019-08-24T06:14:41.313Z"
                extensionStatus:
                  google-auto-tagging: "success"
                  remove-bg: "pending"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Your request does not contain private API key.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io .
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Your account cannot be authenticated.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io .
        "404":
          description: File not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: The requested file does not exist.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io .
  /v1/customMetadataFields/{id}:
    patch:
      tags:
        - Digital Asset Management (DAM)
        - Custom metadata fields
      operationId: update-existing-field
      summary: Update existing field
      description: |
        This API updates the label or schema of an existing custom metadata field.
      parameters:
        - description: |
            Should be a valid custom metadata field id.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                label:
                  type: string
                  description: Human readable name of the custom metadata field. This should be unique across all non deleted custom metadata fields. This name is displayed as form field label to the users while setting field value on an asset in the media library UI. This parameter is required if `schema` is not provided.
                schema:
                  type: object
                  description: |
                    An object that describes the rules for the custom metadata key. This parameter is required if `label` is not provided. Note: `type` cannot be updated and will be ignored if sent with the `schema`. The schema will be validated as per the existing `type`.
                  properties:
                    selectOptions:
                      type: array
                      items: {}
                      description: |
                        An array of allowed values. This property is only required if `type` property is set to `SingleSelect` or `MultiSelect`.
                      example:
                        - small
                        - medium
                        - large
                        - 30
                        - 40
                        - true
                    defaultValue:
                      description: |
                        The default value for this custom metadata field. This property is only required if `isValueRequired` property is set to `true`. The value should match the `type` of custom metadata field.
                      oneOf:
                        - type: string
                        - type: number
                        - type: boolean
                        - type: array
                          items: {}
                          description: |
                            Default value should be of type array when custom metadata field type is set to `MultiSelect`.
                          example:
                            - true
                            - 10
                            - Hello
                    isValueRequired:
                      type: boolean
                      description: |
                        Sets this custom metadata field as required. Setting custom metadata fields on an asset will throw error if the value for all required fields are not present in upload or update asset API request body.
                    minValue:
                      description: |
                        Minimum value of the field. Only set this property if `type` is set to `Date` or `Number`.
                      oneOf:
                        - type: string
                          description: Set the minimum date in ISO8601 string format.
                        - type: number
                          description: Set the minimum numeric value.
                    maxValue:
                      description: |
                        Maximum value of the field. Only set this property if `type` is set to `Date` or `Number`.
                      oneOf:
                        - type: string
                          description: Set the maximum date in ISO8601 string format.
                        - type: number
                          description: Set the maximum numeric value.
                    minLength:
                      description: |
                        Minimum length of string. Only set this property if `type` is set to `Text` or `Textarea`.
                      type: number
                    maxLength:
                      description: |
                        Maximum length of string. Only set this property if `type` is set to `Text` or `Textarea`.
                      type: number
            example:
              label: price
              schema:
                type: Number
                minValue: 1000
                maxValue: 3000
      responses:
        "200":
          description: Custom metadata field updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/customMetadataField"
              example:
                id: 598821f949c0a938d57563dd
                name: price
                label: price
                schema:
                  type: Number
                  minValue: 1000
                  maxValue: 3000
    delete:
      tags:
        - Digital Asset Management (DAM)
        - Custom metadata fields
      operationId: delete-a-field
      summary: Delete a field
      description: |
        This API deletes a custom metadata field. Even after deleting a custom metadata field, you cannot create any new custom metadata field with the same name.
      parameters:
        - description: |
            Should be a valid custom metadata field id.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Custom metadata field deleted successfully.
          content:
            application/json:
              schema:
                type: object
  /v1/files:
    get:
      tags:
        - Digital Asset Management (DAM)
      operationId: list-and-search-assets
      summary: List and search assets
      description: |
        This API can list all the uploaded files and folders in your ImageKit.io media library. In addition, you can fine-tune your query by specifying various filters by generating a query string in a Lucene-like syntax and provide this generated string as the value of the `searchQuery`.
      parameters:
        - in: query
          name: type
          required: false
          description: |
            Limit search to one of `file`, `file-version`, or `folder`. Pass `all` to include `files` and `folders` in search results (`file-version` will not be included in this case).

            Default value - `file`
          schema:
            type: string
            enum:
              - file
              - file-version
              - folder
              - all
        - in: query
          name: sort
          required: false
          description: |
            You can sort based on the following fields:

            1. name - `ASC_NAME` or `DESC_NAME`
            2. createdAt - `ASC_CREATED` or `DESC_CREATED`
            3. updatedAt - `ASC_UPDATED` or `DESC_UPDATED`
            4. height - `ASC_HEIGHT` or `DESC_HEIGHT`
            5. width - `ASC_WIDTH` or `DESC_WIDTH`
            6. size - `ASC_SIZE` or `DESC_SIZE`

            Default value - `ASC_CREATED`
          schema:
            type: string
        - in: query
          name: path
          required: false
          description: |
            Folder path if you want to limit the search within a specific folder. For example, `/sales-banner/` will only search in folder sales-banner.
          schema:
            type: string
        - in: query
          name: searchQuery
          required: false
          description: |
            Query string in a Lucene-like query language. Learn more about the query expression later in this section.

            Note : When the searchQuery parameter is present, the following query parameters will have no effect on the result:
            1. `tags`
            2. `type`
            3. `name`
          schema:
            type: string
        - in: query
          name: fileType
          required: false
          description: |
            Type of files to include in the result set. Accepts three values:

            `all` - include all types of files in the result set.
            `image` - only search in image type files.
            `non-image` - only search in files that are not images, e.g., JS or CSS or video files.

            Default value - `all`
          schema:
            type: string
        - in: query
          name: limit
          required: false
          description: |
            The maximum number of results to return in response:

            Minimum value - 1

            Maximum value - 1000

            Default value - 1000
          schema:
            type: string
        - in: query
          name: skip
          required: false
          description: |
            The number of results to skip before returning results:

            Minimum value - 0

            Default value - 0
          schema:
            type: string
      responses:
        "200":
          description: List of assets.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/fileDetails"
              example:
                - fileId: 598821f949c0a938d57563bd
                  type: file
                  name: file.jpg
                  filePath: /images/products/file.jpg
                  tags:
                    - t-shirt
                    - round-neck
                    - sale2019
                  AITags:
                    - name: Shirt
                      confidence: 90.12
                      source: google-auto-tagging
                    - name: T-shirt
                      confidence: 80.12
                      source: aws-auto-tagging
                  versionInfo:
                    id: 598821f949c0a938d57563bd
                    name: Version 2
                  isPrivateFile: false
                  customCoordinates: null
                  url: https://ik.imagekit.io/your_imagekit_id/images/products/file.jpg
                  thumbnail: https://ik.imagekit.io/your_imagekit_id/tr:n-ik_ml_thumbnail/images/products/file.jpg
                  fileType: image
                  mime: image/jpeg
                  width: 100
                  height: 100
                  size: 100
                  hasAlpha: false
                  customMetadata:
                    brand: Nike
                    color: red
                  createdAt: "2019-08-24T06:14:41.313Z"
                  updatedAt: "2019-08-24T06:14:41.313Z"
                - fileId: 598821f949c0a938d81963bd
                  type: file-version
                  name: file.jpg
                  filePath: /images/products/file.jpg
                  tags:
                    - t-shirt
                    - sale2019
                  AITags:
                    - name: Shirt
                      confidence: 90.12
                      source: google-auto-tagging
                    - name: T-shirt
                      confidence: 80.12
                      source: aws-auto-tagging
                  versionInfo:
                    id: 598821f949c0a938d57563bd
                    name: Version 1
                  isPrivateFile: false
                  customCoordinates: null
                  url: https://ik.imagekit.io/your_imagekit_id/images/products/file.jpg?ik-obj-version=iAg8gxkqo_QUBwqNeQrJzuyce2XB7Gc4
                  thumbnail: https://ik.imagekit.io/your_imagekit_id/tr:n-ik_ml_thumbnail/images/products/file.jpg?ik-obj-version=iAg8gxkqo_QUBwqNeQrJzuyce2XB7Gc4
                  fileType: image
                  mime: image/jpeg
                  width: 100
                  height: 100
                  size: 100
                  hasAlpha: false
                  customMetadata:
                    brand: Nike
                    color: red
                  createdAt: "2019-08-24T06:15:41.313Z"
                  updatedAt: "2019-08-24T06:15:41.313Z"
                - folderId: 6441fce4e809dd54b0dee029
                  type: folder
                  name: summer
                  createdAt: "2023-04-21T03:03:00.869Z"
                  updatedAt: "2023-04-21T03:10:22.374Z"
                  folderPath: "/sale"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Your request does not contain private API key.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io .
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Your account cannot be authenticated.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io .
  /v1/files/{fileId}:
    delete:
      tags:
        - Digital Asset Management (DAM)
        - Managing assets
      operationId: delete-file
      summary: Delete file
      description: |
        This API deletes the file and all its file versions permanently.

        Note: If a file or specific transformation has been requested in the past, then the response is cached. Deleting a file does not purge the cache. You can purge the cache using purge cache API.
      parameters:
        - description: |
            The unique `fileId` of the uploaded file. `fileId` is returned in list and search assets API and upload API.
          in: path
          name: fileId
          required: true
          schema:
            type: string
      responses:
        "204":
          description: File deleted successfully.
          content:
            application/json:
              schema:
                type: object
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Your request does not contain private API key.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io .
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Your account cannot be authenticated.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io .
        "404":
          description: File not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: The requested file does not exist.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io .
  /v1/files/batch/deleteByFileIds:
    post:
      tags:
        - Digital Asset Management (DAM)
        - Managing assets
      operationId: delete-multiple
      summary: Delete multiple
      description: |
        This API deletes multiple files and all their file versions permanently.

        Note: If a file or specific transformation has been requested in the past, then the response is cached. Deleting a file does not purge the cache. You can purge the cache using purge cache API.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - fileIds
              properties:
                fileIds:
                  type: array
                  items:
                    type: string
                  description: |
                    An array of fileIds which you want to delete.
            example:
              fileIds:
                - 598821f949c0a938d57563bd
                - 598821f949c0a938d57563be
      responses:
        "200":
          description: Files deleted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  successfullyDeletedFileIds:
                    type: array
                    items:
                      type: string
                    description: |
                      An array of fileIds that were successfully deleted.
        "207":
          description: Partially successful. Some files were not deleted.
          content:
            application/json:
              schema:
                type: object
                properties:
                  successfullyDeletedFileIds:
                    type: array
                    items:
                      type: string
                    description: |
                      An array of fileIds that were successfully deleted.
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        fileId:
                          type: string
                          description: Unique identifier of the file that was not deleted.
                        error:
                          type: string
                          description: |
                            Error message for the file that was not deleted.
                    description: |
                      An array of fileIds that were not deleted and the error.
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Your request does not contain private API key.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io .
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Your account cannot be authenticated.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io .
        "404":
          description: File not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: The requested file(s) does not exist.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io .
                  missingFileIds:
                    type: array
                    items:
                      type: string
                    description: |
                      An array of fileIds that were not found.
  /v1/files/copy:
    post:
      tags:
        - Digital Asset Management (DAM)
        - Managing assets
      operationId: copy-file
      summary: Copy file
      description: |
        This will copy a file from one folder to another. 

        Note: If any file at the destination has the same name as the source file, then the source file and its versions (if `includeFileVersions` is set to true) will be appended to the destination file version history.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - sourceFilePath
                - destinationPath
              properties:
                sourceFilePath:
                  type: string
                  description: |
                    The full path of the file you want to copy.
                  example: /path/to/file.jpg
                destinationPath:
                  type: string
                  description: |
                    Full path to the folder you want to copy the above file into.
                  example: /folder/to/copy/into/
                includeFileVersions:
                  type: boolean
                  description: |
                    Option to copy all versions of a file. By default, only the current version of the file is copied. When set to true, all versions of the file will be copied. Default value - `false`.
                  example: false
      responses:
        "204":
          description: File copied successfully.
          content:
            application/json:
              schema:
                type: object
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Your request does not contain private API key.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io .
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Your account cannot be authenticated.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io .
        "404":
          description: File not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  reason:
                    type: string
                    example: SOURCE_FILE_MISSING
                  message:
                    type: string
                    example: No file found with filePath `/file1.jpg`.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io .
  /v1/files/move:
    post:
      tags:
        - Digital Asset Management (DAM)
        - Managing assets
      operationId: move-file
      summary: Move file
      description: |
        This will move a file and all its versions from one folder to another. 

        Note: If any file at the destination has the same name as the source file, then the source file and its versions will be appended to the destination file.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - sourceFilePath
                - destinationPath
              properties:
                sourceFilePath:
                  type: string
                  description: |
                    The full path of the file you want to move.
                  example: /path/to/file.jpg
                destinationPath:
                  type: string
                  description: |
                    Full path to the folder you want to move the above file into.
                  example: /folder/to/move/into/
      responses:
        "204":
          description: File moved successfully.
          content:
            application/json:
              schema:
                type: object
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Your request does not contain private API key.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io .
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Your account cannot be authenticated.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io .
        "404":
          description: File not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  reason:
                    type: string
                    example: SOURCE_FILE_MISSING
                  message:
                    type: string
                    example: No file found with filePath `/file1.jpg`.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io .
  /v1/files/rename:
    put:
      tags:
        - Digital Asset Management (DAM)
        - Managing assets
      operationId: rename-file
      summary: Rename file
      description: |
        You can rename an already existing file in the media library using rename file API. This operation would rename all file versions of the file. 

        Note: The old URLs will stop working. The file/file version URLs cached on CDN will continue to work unless a purge is requested.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - filePath
                - newFileName
              properties:
                filePath:
                  type: string
                  description: |
                    The full path of the file you want to rename.
                  example: /path/to/file.jpg
                newFileName:
                  type: string
                  description: |
                    The new name of the file. A filename can contain:

                    Alphanumeric Characters: `a-z`, `A-Z`, `0-9` (including Unicode letters, marks, and numerals in other languages).
                    Special Characters: `.`, `_`, and `-`.

                    Any other character, including space, will be replaced by `_`.
                  example: newFileName.jpg
                purgeCache:
                  type: boolean
                  description: |
                    Option to purge cache for the old file URL.

                    When set to true, it will internally issue a purge cache request on CDN to remove cached content on the old URL. E.g. if an old file was accessible at - `https://ik.imagekit.io/demo/old-filename.jpg`, a purge cache request will be issued to remove the CDN cache for this URL. This purge request is counted against your monthly purge quota. 

                    Note: Cache will be purged only for the current version of file.

                    Default value - `false`
                  example: true
      responses:
        "200":
          description: On success, you will receive `purgeRequestId` in the response body, which can be used to get the purge request status. This is only sent if the `purgeCache` is set to `true` in the request. Otherwise, the response is an empty JSON.
          content:
            application/json:
              schema:
                type: object
                properties:
                  purgeRequestId:
                    type: string
                    description: |
                      Unique identifier of the purge request. This can be used to check the status of the purge request.
        "207":
          description: In case purgeCache is set to true and total purge request count has exceeded the quota, we will rename the file but won't purge CDN cache.
          content:
            application/json:
              schema:
                type: object
                properties:
                  reason:
                    type: string
                    example: PURGE_FAILED
                  message:
                    type: string
                    example: File renamed successfully but we could not purge the CDN cache for old URL because of rate limits on purge API.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io .
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Your request does not contain private API key.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io .
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Your account cannot be authenticated.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io .
        "404":
          description: If no file is found at the specified filePath in the media library, then a 404 response is returned.
          content:
            application/json:
              schema:
                type: object
                properties:
                  reason:
                    type: string
                    example: FILE_MISSING
                  message:
                    type: string
                    example: No file found in media library at filePath /path/to/file.jpg
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io .
        "409":
          description: If a file with newFileName already exist in the same location.
          content:
            application/json:
              schema:
                type: object
                properties:
                  reason:
                    type: string
                    example: FILE_ALREADY_EXISTS
                  message:
                    type: string
                    example: File with name newFileName already exists at the same location.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io .
  /v1/files/{fileId}/versions:
    get:
      tags:
        - Digital Asset Management (DAM)
        - Managing assets
      operationId: list-file-versions
      summary: List file versions
      description: |
        This API returns details of all versions of a file.
      parameters:
        - description: |
            The unique `fileId` of the uploaded file. `fileId` is returned in list and search assets API and upload API.
          in: path
          name: fileId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Array of file version objects.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/fileDetails"
                  example:
                    - fileId: 598821f949c0a938d57563bd
                      type: file
                      name: file.jpg
                      filePath: /images/products/file.jpg
                      tags:
                        - t-shirt
                        - round-neck
                        - sale2019
                      AITags:
                        - name: Shirt
                          confidence: 90.12
                          source: google-auto-tagging
                        - name: T-shirt
                          confidence: 80.12
                          source: aws-auto-tagging
                      versionInfo:
                        id: 598821f949c0a938d57563bd
                        name: Version 2
                      isPrivateFile: false
                      customCoordinates: null
                      url: https://ik.imagekit.io/your_imagekit_id/images/products/file.jpg
                      thumbnail: https://ik.imagekit.io/your_imagekit_id/tr:n-ik_ml_thumbnail/images/products/file.jpg
                      fileType: image
                      mime: image/jpeg
                      width: 100
                      height: 100
                      size: 100
                      hasAlpha: false
                      customMetadata:
                        brand: Nike
                        color: red
                      createdAt: "2019-08-24T06:14:41.313Z"
                      updatedAt: "2019-08-24T06:14:41.313Z"
                    - fileId: 598821f949c0a938d81963bd
                      type: file-version
                      name: file.jpg
                      filePath: /images/products/file.jpg
                      tags:
                        - t-shirt
                        - sale2019
                      AITags:
                        - name: Shirt
                          confidence: 90.12
                          source: google-auto-tagging
                        - name: T-shirt
                          confidence: 80.12
                          source: aws-auto-tagging
                      versionInfo:
                        id: 598821f949c0a938d57563bd
                        name: Version 1
                      isPrivateFile: false
                      customCoordinates: null
                      url: https://ik.imagekit.io/your_imagekit_id/images/products/file.jpg?ik-obj-version=iAg8gxkqo_QUBwqNeQrJzuyce2XB7Gc4
                      thumbnail: https://ik.imagekit.io/your_imagekit_id/tr:n-ik_ml_thumbnail/images/products/file.jpg?ik-obj-version=iAg8gxkqo_QUBwqNeQrJzuyce2XB7Gc4
                      fileType: image
                      mime: image/jpeg
                      width: 100
                      height: 100
                      size: 100
                      hasAlpha: false
                      customMetadata:
                        brand: Nike
                        color: red
                      createdAt: "2019-08-24T06:15:41.313Z"
                      updatedAt: "2019-08-24T06:15:41.313Z"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Your request does not contain private API key.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io .
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Your account cannot be authenticated.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io .
        "404":
          description: File not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: The requested file does not exist.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io .
  /v1/files/{fileId}/versions/{versionId}:
    get:
      tags:
        - Digital Asset Management (DAM)
        - Managing assets
      operationId: get-file-version-details
      summary: Get file version details
      description: This API returns an object with details or attributes of a file version.
      parameters:
        - description: |
            The unique `fileId` of the uploaded file. `fileId` is returned in list and search assets API and upload API.
          in: path
          name: fileId
          required: true
          schema:
            type: string
        - description: |
            The unique `versionId` of the uploaded file. `versionId` is returned in list and search assets API and upload API.
          in: path
          name: versionId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: File version details object.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/fileDetails"
              example:
                fileId: 598821f949c0a938d81963bd
                type: file-version
                name: file.jpg
                filePath: /images/products/file.jpg
                tags:
                  - t-shirt
                  - sale2019
                AITags:
                  - name: Shirt
                    confidence: 90.12
                    source: google-auto-tagging
                  - name: T-shirt
                    confidence: 80.12
                    source: aws-auto-tagging
                versionInfo:
                  id: 598821f949c0a938d57563bd
                  name: Version 1
                isPrivateFile: false
                customCoordinates: null
                url: https://ik.imagekit.io/your_imagekit_id/images/products/file.jpg?ik-obj-version=iAg8gxkqo_QUBwqNeQrJzuyce2XB7Gc4
                thumbnail: https://ik.imagekit.io/your_imagekit_id/tr:n-ik_ml_thumbnail/images/products/file.jpg?ik-obj-version=iAg8gxkqo_QUBwqNeQrJzuyce2XB7Gc4
                fileType: image
                mime: image/jpeg
                width: 100
                height: 100
                size: 100
                hasAlpha: false
                customMetadata:
                  brand: Nike
                  color: red
                createdAt: "2019-08-24T06:15:41.313Z"
                updatedAt: "2019-08-24T06:15:41.313Z"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Your request does not contain private API key.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io .
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Your account cannot be authenticated.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io .
        "404":
          description: File version not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: The requested file version does not exist.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io .
    delete:
      tags:
        - Digital Asset Management (DAM)
        - Managing assets
      operationId: delete-file-version
      summary: Delete file version
      description: |
        This API deletes a non-current file version permanently. The API returns an empty response.

        Note: If you want to delete all versions of a file, use the delete file API.
      parameters:
        - description: |
            The unique `fileId` of the uploaded file. `fileId` is returned in list and search assets API and upload API.
          in: path
          name: fileId
          required: true
          schema:
            type: string
        - description: |
            The unique `versionId` of the uploaded file. `versionId` is returned in list and search assets API and upload API.
          in: path
          name: versionId
          required: true
          schema:
            type: string
      responses:
        "204":
          description: File version deleted successfully.
          content:
            application/json:
              schema:
                type: object
        "400":
          description: Trying to delete the current version of the file.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: You cannot delete current version of a file.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io .
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Your request does not contain private API key.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io .
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Your account cannot be authenticated.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io
        "404":
          description: File version found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: The requested asset does not exist.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io .
  /v1/files/{fileId}/versions/{versionId}/restore:
    put:
      tags:
        - Digital Asset Management (DAM)
        - Managing assets
      operationId: restore-file-version
      summary: Restore file version
      description: |
        This API restores a file version as the current file version.
      parameters:
        - description: |
            The unique `fileId` of the uploaded file. `fileId` is returned in list and search assets API and upload API.
          in: path
          name: fileId
          required: true
          schema:
            type: string
        - description: |
            The unique `versionId` of the uploaded file. `versionId` is returned in list and search assets API and upload API.
          in: path
          name: versionId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Restored file details object.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/fileDetails"
                example:
                  fileId: 598821f949c0a938d57563bd
                  type: file
                  name: file.jpg
                  filePath: /images/products/file.jpg
                  tags:
                    - t-shirt
                    - round-neck
                    - sale2019
                  AITags:
                    - name: Shirt
                      confidence: 90.12
                      source: google-auto-tagging
                    - name: T-shirt
                      confidence: 80.12
                      source: aws-auto-tagging
                  versionInfo:
                    id: 598821f949c0a938d57563bd
                    name: Version 2
                  isPrivateFile: false
                  customCoordinates: null
                  url: https://ik.imagekit.io/your_imagekit_id/images/products/file.jpg
                  thumbnail: https://ik.imagekit.io/your_imagekit_id/tr:n-ik_ml_thumbnail/images/products/file.jpg
                  fileType: image
                  mime: image/jpeg
                  width: 100
                  height: 100
                  size: 100
                  hasAlpha: false
                  customMetadata:
                    brand: Nike
                    color: red
                  createdAt: "2019-08-24T06:14:41.313Z"
                  updatedAt: "2019-08-24T06:14:41.313Z"

        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Your request does not contain private API key.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io .
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Your account cannot be authenticated.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io .
        "404":
          description: File or file version does not exist
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: The requested file version does not exist.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io .
  /v1/files/addTags:
    post:
      tags:
        - Digital Asset Management (DAM)
        - Managing assets
      operationId: add-tags-bulk
      summary: Add tags (bulk)
      description: |
        This API adds tags to multiple files in bulk.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - fileIds
                - tags
              properties:
                fileIds:
                  type: array
                  items:
                    type: string
                  description: |
                    An array of fileIds to which you want to add tags.
                tags:
                  type: array
                  items:
                    type: string
                  description: |
                    An array of tags that you want to add to the files.
            example:
              fileIds:
                - 598821f949c0a938d57563bd
                - 598821f949c0a938d57563be
              tags:
                - t-shirt
                - round-neck
                - sale2019
      responses:
        "200":
          description: Tags added successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  successfullyUpdatedFileIds:
                    type: array
                    items:
                      type: string
                    description: |
                      An array of fileIds that in which tags were successfully added.
        "207":
          description: Partially successful. Some files were not updated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  successfullyUpdatedFileIds:
                    type: array
                    items:
                      type: string
                    description: |
                      An array of fileIds that were successfully updated.
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        fileId:
                          type: string
                          description: Unique identifier of the file that was not updated.
                        error:
                          type: string
                          description: |
                            Error message for the file that was not updated.
                    description: |
                      An array of fileIds that were not updated and the error.
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Your request does not contain private API key.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io .
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Your account cannot be authenticated.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io .
        "404":
          description: File not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: The requested file(s) does not exist.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io .
                  missingFileIds:
                    type: array
                    items:
                      type: string
                    description: |
                      An array of fileIds that were not found.
  /v1/files/removeTags:
    post:
      tags:
        - Digital Asset Management (DAM)
        - Managing assets
      operationId: remove-tags-bulk
      summary: Remove tags (bulk)
      description: |
        This API removes tags from multiple files in bulk.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - fileIds
                - tags
              properties:
                fileIds:
                  type: array
                  items:
                    type: string
                  description: |
                    An array of fileIds from which you want to remove tags.
                tags:
                  type: array
                  items:
                    type: string
                  description: |
                    An array of tags that you want to remove from the files.
            example:
              fileIds:
                - 598821f949c0a938d57563bd
                - 598821f949c0a938d57563be
              tags:
                - t-shirt
                - round-neck
                - sale2019
      responses:
        "200":
          description: Tags removed successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  successfullyUpdatedFileIds:
                    type: array
                    items:
                      type: string
                    description: |
                      An array of fileIds that in which tags were successfully removed.
        "207":
          description: Partially successful. Some files were not updated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  successfullyUpdatedFileIds:
                    type: array
                    items:
                      type: string
                    description: |
                      An array of fileIds that were successfully updated.
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        fileId:
                          type: string
                          description: Unique identifier of the file that was not updated.
                        error:
                          type: string
                          description: |
                            Error message for the file that was not updated.
                    description: |
                      An array of fileIds that were not updated and the error.
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Your request does not contain private API key.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io .
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Your account cannot be authenticated.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io .
        "404":
          description: File not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: The requested file(s) does not exist.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io .
                  missingFileIds:
                    type: array
                    items:
                      type: string
                    description: |
                      An array of fileIds that were not found.
  /v1/files/removeAITags:
    post:
      tags:
        - Digital Asset Management (DAM)
        - Managing assets
      operationId: remove-ai-tags-bulk
      summary: Remove AI tags (bulk)
      description: |
        This API removes AITags from multiple files in bulk.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - fileIds
                - tags
              properties:
                fileIds:
                  type: array
                  items:
                    type: string
                  description: |
                    An array of fileIds from which you want to remove AITags.
                tags:
                  type: array
                  items:
                    type: string
                  description: |
                    An array of AITags that you want to remove from the files.
            example:
              fileIds:
                - 598821f949c0a938d57563bd
                - 598821f949c0a938d57563be
              tags:
                - t-shirt
                - round-neck
                - sale2019
      responses:
        "200":
          description: AITags removed successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  successfullyUpdatedFileIds:
                    type: array
                    items:
                      type: string
                    description: |
                      An array of fileIds that in which AITags were successfully removed.
        "207":
          description: Partially successful. Some files were not updated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  successfullyUpdatedFileIds:
                    type: array
                    items:
                      type: string
                    description: |
                      An array of fileIds that were successfully updated.
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        fileId:
                          type: string
                          description: Unique identifier of the file that was not updated.
                        error:
                          type: string
                          description: |
                            Error message for the file that was not updated.
                    description: |
                      An array of fileIds that were not updated and the error.
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Your request does not contain private API key.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io .
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Your account cannot be authenticated.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io .
        "404":
          description: File not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: The requested file(s) does not exist.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io .
  /v1/folder:
    post:
      tags:
        - Digital Asset Management (DAM)
        - Managing folders
      operationId: create-folder
      summary: Create folder
      description: |
        This will create a new folder. You can specify the folder name and location of the parent folder where this new folder should be created.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - folderName
                - parentFolderPath
              properties:
                folderName:
                  type: string
                  description: |
                    The folder will be created with this name. 

                    All characters except alphabets and numbers (inclusive of unicode letters, marks, and numerals in other languages) will be replaced by an underscore i.e. `_`.
                parentFolderPath:
                  type: string
                  description: |
                    The folder where the new folder should be created, for root use `/` else the path e.g. `containing/folder/`.

                    Note: If any folder(s) is not present in the parentFolderPath parameter, it will be automatically created. For example, if you pass `/product/images/summer`, then `product`, `images`, and `summer` folders will be created if they don't already exist.
            example:
              folderName: summer
              parentFolderPath: /product/images/
      responses:
        "201":
          description: Folder created successfully.
          content:
            application/json:
              schema:
                type: object
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Your request does not contain private API key.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io .
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Your account cannot be authenticated.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io .
    delete:
      tags:
        - Digital Asset Management (DAM)
        - Managing folders
      operationId: delete-folder
      summary: Delete folder
      description: |
        This will delete a folder and all its contents permanently. The API returns an empty response.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - folderPath
              properties:
                folderPath:
                  type: string
                  description: |
                    Full path to the folder you want to delete. For example `/folder/to/delete/`.
            example:
              folderPath: /folder/to/delete/
      responses:
        "204":
          description: Folder deleted successfully.
          content:
            application/json:
              schema:
                type: object
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Your request does not contain private API key.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io .
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Your account cannot be authenticated.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io .
        "404":
          description: Folder not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  reason:
                    type: string
                    example: FOLDER_NOT_FOUND
                  message:
                    type: string
                    example: No folder found with folderPath `/folder/to/delete/`.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io .
  /v1/bulkJobs/copyFolder:
    post:
      tags:
        - Digital Asset Management (DAM)
        - Managing folders
      operationId: copy-folder
      summary: Copy folder
      description: |
        This will copy one folder into another. The selected folder, its nested folders, files, and their versions (in `includeVersions` is set to true) are copied in this operation. Note: If any file at the destination has the same name as the source file, then the source file and its versions will be appended to the destination file version history.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - sourceFolderPath
                - destinationPath
              properties:
                sourceFolderPath:
                  type: string
                  description: |
                    The full path to the source folder you want to copy.
                  example: /path/of/source/folder
                destinationPath:
                  type: string
                  description: |
                    Full path to the destination folder where you want to copy the source folder into.
                  example: /path/of/destination/folder
                includeVersions:
                  type: boolean
                  description: |
                    Option to copy all versions of files that are nested inside the selected folder. By default, only the current version of each file will be copied. When set to true, all versions of each file will be copied. Default value - `false`.
                  example: true
      responses:
        "200":
          description: Job submitted successfully. A `jobId` will be returned.
          content:
            application/json:
              schema:
                type: object
                properties:
                  jobId:
                    type: string
                    description: |
                      Unique identifier of the bulk job. This can be used to check the status of the bulk job.
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Your request does not contain private API key.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io .
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Your account cannot be authenticated.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io .
        "404":
          description: Folder not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  reason:
                    type: string
                    example: NO_FILES_FOLDER
                  message:
                    type: string
                    example: No files & folder found at sourceFolderPath `/folder/to/copy`.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io .
  /v1/bulkJobs/moveFolder:
    post:
      tags:
        - Digital Asset Management (DAM)
        - Managing folders
      operationId: move-folder
      summary: Move folder
      description: |
        This will move one folder into another. The selected folder, its nested folders, files, and their versions are moved in this operation. Note: If any file at the destination has the same name as the source file, then the source file and its versions will be appended to the destination file version history.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - sourceFolderPath
                - destinationPath
              properties:
                sourceFolderPath:
                  type: string
                  description: |
                    The full path to the source folder you want to move.
                  example: /path/of/source/folder
                destinationPath:
                  type: string
                  description: |
                    Full path to the destination folder where you want to move the source folder into.
                  example: /path/of/destination/folder
      responses:
        "200":
          description: Job submitted successfully. A `jobId` will be returned.
          content:
            application/json:
              schema:
                type: object
                properties:
                  jobId:
                    type: string
                    description: |
                      Unique identifier of the bulk job. This can be used to check the status of the bulk job.
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Your request does not contain private API key.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io .
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Your account cannot be authenticated.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io .
        "404":
          description: Folder not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  reason:
                    type: string
                    example: NO_FILES_FOLDER
                  message:
                    type: string
                    example: No files & folder found at sourceFolderPath `/folder/to/move`.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit .io .
  /v1/bulkJobs/{jobId}:
    get:
      tags:
        - Digital Asset Management (DAM)
        - Managing folders
      operationId: bulk-job-status
      summary: Bulk job status
      description: |
        This API returns the status of a bulk job like copy and move folder operations.
      parameters:
        - description: |
            The `jobId` is returned in the response of bulk job API e.g. copy folder or move folder API.
          in: path
          name: jobId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: |
            On success, you will receive the status of the bulk job in the response body.
          content:
            application/json:
              schema:
                type: object
                properties:
                  jobId:
                    type: string
                    description: |
                      Unique identifier of the bulk job.
                  type:
                    type: string
                    description: |
                      Type of the bulk job. Possible values - `COPY_FOLDER`, `MOVE_FOLDER`.
                  status:
                    type: string
                    description: |
                      Status of the bulk job. Possible values - `Pending`, `Completed`.
                example:
                  jobId: 5d5b1a9b4c8c4c0001f3e4a2
                  type: COPY_FOLDER
                  status: Completed
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Your request does not contain private API key.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io .
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Your account cannot be authenticated.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io .
        "404":
          description: Job not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: The requested job does not exist.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io .
  /v1/files/purge:
    post:
      tags:
        - Caching
      operationId: purge-cache
      summary: Purge cache
      description: |
        This API will purge CDN cache and ImageKit.io's internal cache for a file.  Note: Purge cache is an asynchronous process and it may take some time to reflect the changes.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - url
              properties:
                url:
                  type: string
                  description: |
                    The full URL of the file to be purged.
                  example: https://ik.imagekit.io/your_imagekit_id/default-image.jpg
      responses:
        "201":
          description: Purge request submitted successfully. A `requestId` will be returned.
          content:
            application/json:
              schema:
                type: object
                properties:
                  requestId:
                    type: string
                    description: |
                      Unique identifier of the purge request. This can be used to check the status of the purge request.
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Your request does not contain private API key.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io .
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Your account cannot be authenticated.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io .
  /v1/files/purge/{requestId}:
    get:
      tags:
        - Caching
      operationId: purge-status
      summary: Get purge status
      description: |
        This API returns the status of a purge cache request.
      parameters:
        - description: |
            Should be a valid requestId.
          in: path
          name: requestId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: |
            On success, you will receive the status of the purge request in the response body.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: Completed
                    description: |
                      Status of the purge request. Possible values - `Completed`, `Pending`.
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Your request does not contain private API key.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io .
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Your account cannot be authenticated.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io .
  /v1/files/{fileId}/metadata:
    get:
      tags:
        - File Metadata
      operationId: get-uploaded-file-metadata
      summary: Get uploaded file metadata
      description: |
        You can programmatically get image EXIF, pHash, and other metadata for uploaded files in the ImageKit.io media library using this API.

        You can also get the image metadata while uploading the image by passing metadata in `responseFields` parameter.
      parameters:
        - description: |
            The unique `fileId` of the uploaded file. `fileId` is returned in the list and search assets API and upload API.
          in: path
          name: fileId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: File metadata object.
          content:
            application/json:
              schema:
                type: object
              example:
                height: 68
                width: 100
                size: 7749
                format: jpg
                hasColorProfile: true
                quality: 0
                density: 72
                hasTransparency: false
                pHash: f06830ca9f1e3e90
                exif:
                  image:
                    Make: Canon
                    Model: Canon EOS 40D
                    Orientation: 1
                    XResolution: 72
                    YResolution: 72
                    ResolutionUnit: 2
                    Software: GIMP 2.4.5
                    ModifyDate: 2008:07:31 10:38:11
                    YCbCrPositioning: 2
                    ExifOffset: 214
                    GPSInfo: 978
                  thumbnail:
                    Compression: 6
                    XResolution: 72
                    YResolution: 72
                    ResolutionUnit: 2
                    ThumbnailOffset: 1090
                    ThumbnailLength: 1378
                  exif:
                    ExposureTime: 0.00625
                    FNumber: 7.1
                    ExposureProgram: 1
                    ISO: 100
                    ExifVersion: "0221"
                    DateTimeOriginal: 2008:05:30 15:56:01
                    CreateDate: 2008:05:30 15:56:01
                    ShutterSpeedValue: 7.375
                    ApertureValue: 5.625
                    ExposureCompensation: 0
                    MeteringMode: 5
                    Flash: 9
                    FocalLength: 135
                    SubSecTime: "00"
                    SubSecTimeOriginal: "00"
                    SubSecTimeDigitized: "00"
                    FlashpixVersion: "0100"
                    ColorSpace: 1
                    ExifImageWidth: 100
                    ExifImageHeight: 68
                    InteropOffset: 948
                    FocalPlaneXResolution: 4438.356164383562
                    FocalPlaneYResolution: 4445.969125214408
                    FocalPlaneResolutionUnit: 2
                    CustomRendered: 0
                    ExposureMode: 1
                    WhiteBalance: 0
                    SceneCaptureType: 0
                  gps:
                    GPSVersionID:
                      - 2
                      - 2
                      - 0
                      - 0
                  interoperability:
                    InteropIndex: R98
                    InteropVersion: "0100"
                  makernote: {}
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Your request does not contain private API key.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io .
  /v1/files/metadata:
    get:
      tags:
        - File Metadata
      operationId: get-metadata-from-url
      summary: Get metadata from remote URL
      description: |
        Get image EXIF, pHash, and other metadata from ImageKit.io powered remote URL using this API.
      parameters:
        - description: |
            Should be a valid file URL.
          in: query
          name: url
          required: true
          schema:
            type: string
      responses:
        "200":
          description: File metadata object.
          content:
            application/json:
              schema:
                type: object
              example:
                height: 68
                width: 100
                size: 7749
                format: jpg
                hasColorProfile: true
                quality: 0
                density: 72
                hasTransparency: false
                pHash: f06830ca9f1e3e90
                exif:
                  image:
                    Make: Canon
                    Model: Canon EOS 40D
                    Orientation: 1
                    XResolution: 72
                    YResolution: 72
                    ResolutionUnit: 2
                    Software: GIMP 2.4.5
                    ModifyDate: 2008:07:31 10:38:11
                    YCbCrPositioning: 2
                    ExifOffset: 214
                    GPSInfo: 978
                  thumbnail:
                    Compression: 6
                    XResolution: 72
                    YResolution: 72
                    ResolutionUnit: 2
                    ThumbnailOffset: 1090
                    ThumbnailLength: 1378
                  exif:
                    ExposureTime: 0.00625
                    FNumber: 7.1
                    ExposureProgram: 1
                    ISO: 100
                    ExifVersion: "0221"
                    DateTimeOriginal: 2008:05:30 15:56:01
                    CreateDate: 2008:05:30 15:56:01
                    ShutterSpeedValue: 7.375
                    ApertureValue: 5.625
                    ExposureCompensation: 0
                    MeteringMode: 5
                    Flash: 9
                    FocalLength: 135
                    SubSecTime: "00"
                    SubSecTimeOriginal: "00"
                    SubSecTimeDigitized: "00"
                    FlashpixVersion: "0100"
                    ColorSpace: 1
                    ExifImageWidth: 100
                    ExifImageHeight: 68
                    InteropOffset: 948
                    FocalPlaneXResolution: 4438.356164383562
                    FocalPlaneYResolution: 4445.969125214408
                    FocalPlaneResolutionUnit: 2
                    CustomRendered: 0
                    ExposureMode: 1
                    WhiteBalance: 0
                    SceneCaptureType: 0
                  gps:
                    GPSVersionID:
                      - 2
                      - 2
                      - 0
                      - 0
                  interoperability:
                    InteropIndex: R98
                    InteropVersion: "0100"
                  makernote: {}
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Your request does not contain private API key.
                  help:
                    type: string
                    example: For support kindly contact us at support@imagekit.io .
  /api/v1/files/upload:
    servers:
      - url: https://upload.imagekit.io
    post:
      tags:
        - Upload File
      operationId: upload-file
      summary: Upload file
      description: |
        You can upload files to the ImageKit.io media library from your server-side using private API key authentication.

        File size limit:
        The maximum upload file size is limited to 25MB on the free plan. On paid plan, this limit is 300MB for video files.

        Version limit:
        A file can have a maximum of 100 versions.
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
                - fileName
              properties:
                file:
                  type: string
                  anyOf:
                    - format: binary
                    - format: base64
                    - format: url
                  description: |
                    This field accepts three kinds of values:

                    - `binary` - You can send the content of the file as binary. This is used when a file is being uploaded from the browser.
                    - `base64` - Base64 encoded string of file content.
                    - `url` - URL of the file from where to download the content before uploading.

                    Note: When passing a URL in the file parameter, please ensure that our servers can access the URL. In case ImageKit is unable to download the file from the specified URL, a 400 error response is returned. In addition to this, the file download request is aborted if response headers are not received in 8 seconds. This will also result in a `400` error.
                  example: https://www.example.com/rest-of-the-image-path.jpg.
                fileName:
                  type: string
                  description: |
                    The name with which the file has to be uploaded.

                    The file name can contain:

                    - Alphanumeric Characters: `a-z`, `A-Z`, `0-9` (including unicode letters, marks, and numerals in other languages)
                    - Special Characters: `.` and `-`
                    Any other character including space will be replaced by `_`
                useUniqueFileName:
                  type: boolean
                  description: |
                    Whether to use a unique filename for this file or not.

                    - Accepts `true` or `false`.
                    - If set `true`, ImageKit.io will add a unique suffix to the filename parameter to get a unique filename.
                    - If set `false`, then the image is uploaded with the provided filename parameter, and any existing file with the same name is replaced.

                    Default value - `true`
                tags:
                  type: string
                  description: |
                    Set the tags while uploading the file.

                    - Comma-separated value of tags in the format `tag1,tag2,tag3`.
                    - The maximum length of all characters should not exceed 500.
                    - `%` is not allowed.
                    - If this field is not specified and the file is overwritten then the tags will be removed.
                  example: t-shirt,round-neck,men
                folder:
                  type: string
                  description: |
                    The folder path (e.g. `/images/folder/`) in which the image has to be uploaded. If the folder(s) didn't exist before, a new folder(s) is created. The nesting of folders can be at most 50 levels deep.

                    The folder name can contain:

                    - Alphanumeric Characters: `a-z` , `A-Z` , `0-9` (including unicode letters, marks, and numerals in other languages)
                    - Special Characters: `/` `_` and `-`
                    - Using multiple `/` creates a nested folder.

                    Default value - `/`
                isPrivateFile:
                  type: boolean
                  description: |
                    Whether to mark the file as private or not. This is only relevant for image type files.

                    - Accepts `true` or `false`.
                    - If set `true`, the file is marked as private which restricts access to the original image URL and unnamed image transformations without signed URLs. Without the signed URL, only named transformations work on private images

                    Default value - `false`
                customCoordinates:
                  type: string
                  description: |
                    Define an important area in the image. This is only relevant for image type files.

                    - To be passed as a string with the x and y coordinates of the top-left corner, and width and height of the area of interest in the format `x,y,width,height`. For example - `10,10,100,100`
                    - Can be used with `fo-custom` transformation.
                    - If this field is not specified and the file is overwritten, then customCoordinates will be removed.
                responseFields:
                  type: string
                  description: |
                    Comma-separated values of the fields that you want the API to return in the response. For example, set the value of this field to `tags,customCoordinates,isPrivateFile` to get the value of `tags`, `customCoordinates`, and `isPrivateFile` in the response. Accepts combination of `tags`, `customCoordinates`, `isPrivateFile`, `embeddedMetadata`, and `customMetadata`.
                extensions:
                  type: array
                  items:
                    type: object
                  description: |
                    Stringified JSON object with an array of extensions to be applied to the image.
                    For reference about extensions read here.
                webhookUrl:
                  type: string
                  description: |
                    The final status of pending extensions will be sent to this URL. To learn more about how ImageKit uses webhooks, refer here.
                overwriteFile:
                  type: boolean
                  description: |
                    Default is `true`. If overwriteFile is set to `false` and `useUniqueFileName` is also `false`, and a file already exists at the exact location, upload API will return an error immediately.
                overwriteAITags:
                  type: boolean
                  description: |
                    Default is `true`. If set to `true` and a file already exists at the exact location, its AITags will be removed. Set `overwriteAITags` to `false` to preserve `AITags`.
                overwriteTags:
                  type: boolean
                  description: |
                    Default is `true`. If the request does not have `tags`, `overwriteTags` is set to `true` and a file already exists at the exact location, exiting `tags` will be removed. In case the request body has `tags`, setting `overwriteTag`s to `false` has no effect and request's tags are set on the asset.
                overwriteCustomMetadata:
                  type: boolean
                  description: |
                    Default is `true`. If the request does not have `customMetadata`, `overwriteCustomMetadata` is set to `true` and a file already exists at the exact location, exiting `customMetadata` will be removed. In case the request body has `customMetadata`, setting `overwriteCustomMetadata` to `false` has no effect and request's customMetadata is set on the asset.
                customMetadata:
                  type: object
                  description: |
                    Stringified JSON key-value data to be associated with the asset. Checkout `overwriteCustomMetadata` parameter to understand default behaviour. Before setting any custom metadata on an asset you have to create the field using custom metadata fields API.
      responses:
        "200":
          description: File uploaded successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/uploadResponse"
  /api/v2/files/upload:
    servers:
      - url: https://upload.imagekit.io
    post:
      tags:
        - Upload File
      operationId: upload-file-v2
      summary: Upload file V2
      description: |
        This API is in beta and subject to change.

        You can upload files to the ImageKit.io media library from your server-side using private API key authentication.

        File size limit:
        The maximum upload file size is limited to 25MB on the free plan. On paid plan, this limit is 300MB for video files.

        Version limit:
        A file can have a maximum of 100 versions.
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
                - fileName
              properties:
                file:
                  type: string
                  anyOf:
                    - format: binary
                    - format: base64
                    - format: url
                  description: |
                    This field accepts three kinds of values:

                    - `binary` - You can send the content of the file as binary. This is used when a file is being uploaded from the browser.
                    - `base64` - Base64 encoded string of file content.
                    - `url` - URL of the file from where to download the content before uploading.

                    Note: When passing a URL in the file parameter, please ensure that our servers can access the URL. In case ImageKit is unable to download the file from the specified URL, a 400 error response is returned. In addition to this, the file download request is aborted if response headers are not received in 8 seconds. This will also result in a `400` error.
                  example: https://www.example.com/rest-of-the-image-path.jpg.
                fileName:
                  type: string
                  description: |
                    The name with which the file has to be uploaded.

                    The file name can contain:

                    - Alphanumeric Characters: `a-z`, `A-Z`, `0-9` (including unicode letters, marks, and numerals in other languages)
                    - Special Characters: `.` and `-`
                    Any other character including space will be replaced by `_`
                useUniqueFileName:
                  type: boolean
                  description: |
                    Whether to use a unique filename for this file or not.

                    - Accepts `true` or `false`.
                    - If set `true`, ImageKit.io will add a unique suffix to the filename parameter to get a unique filename.
                    - If set `false`, then the image is uploaded with the provided filename parameter, and any existing file with the same name is replaced.

                    Default value - `true`
                tags:
                  type: string
                  description: |
                    Set the tags while uploading the file.

                    - Comma-separated value of tags in the format `tag1,tag2,tag3`.
                    - The maximum length of all characters should not exceed 500.
                    - `%` is not allowed.
                    - If this field is not specified and the file is overwritten then the tags will be removed.
                  example: t-shirt,round-neck,men
                folder:
                  type: string
                  description: |
                    The folder path (e.g. `/images/folder/`) in which the image has to be uploaded. If the folder(s) didn't exist before, a new folder(s) is created. The nesting of folders can be at most 50 levels deep.

                    The folder name can contain:

                    - Alphanumeric Characters: `a-z` , `A-Z` , `0-9` (including unicode letters, marks, and numerals in other languages)
                    - Special Characters: `/` `_` and `-`
                    - Using multiple `/` creates a nested folder.

                    Default value - `/`
                isPrivateFile:
                  type: boolean
                  description: |
                    Whether to mark the file as private or not. This is only relevant for image type files.

                    - Accepts `true` or `false`.
                    - If set `true`, the file is marked as private which restricts access to the original image URL and unnamed image transformations without signed URLs. Without the signed URL, only named transformations work on private images

                    Default value - `false`
                customCoordinates:
                  type: string
                  description: |
                    Define an important area in the image. This is only relevant for image type files.

                    - To be passed as a string with the x and y coordinates of the top-left corner, and width and height of the area of interest in the format `x,y,width,height`. For example - `10,10,100,100`
                    - Can be used with `fo-custom` transformation.
                    - If this field is not specified and the file is overwritten, then customCoordinates will be removed.
                responseFields:
                  type: string
                  description: |
                    Comma-separated values of the fields that you want the API to return in the response. For example, set the value of this field to `tags,customCoordinates,isPrivateFile` to get the value of `tags`, `customCoordinates`, and `isPrivateFile` in the response. Accepts combination of `tags`, `customCoordinates`, `isPrivateFile`, `embeddedMetadata`, and `customMetadata`.
                extensions:
                  type: array
                  items:
                    type: object
                  description: |
                    Stringified JSON object with an array of extensions to be applied to the image.
                    For reference about extensions read here.
                webhookUrl:
                  type: string
                  description: |
                    The final status of pending extensions will be sent to this URL. To learn more about how ImageKit uses webhooks, refer here.
                overwriteFile:
                  type: boolean
                  description: |
                    Default is `true`. If overwriteFile is set to `false` and `useUniqueFileName` is also `false`, and a file already exists at the exact location, upload API will return an error immediately.
                overwriteAITags:
                  type: boolean
                  description: |
                    Default is `true`. If set to `true` and a file already exists at the exact location, its AITags will be removed. Set `overwriteAITags` to `false` to preserve `AITags`.
                overwriteTags:
                  type: boolean
                  description: |
                    Default is `true`. If the request does not have `tags`, `overwriteTags` is set to `true` and a file already exists at the exact location, exiting `tags` will be removed. In case the request body has `tags`, setting `overwriteTag`s to `false` has no effect and request's tags are set on the asset.
                overwriteCustomMetadata:
                  type: boolean
                  description: |
                    Default is `true`. If the request does not have `customMetadata`, `overwriteCustomMetadata` is set to `true` and a file already exists at the exact location, exiting `customMetadata` will be removed. In case the request body has `customMetadata`, setting `overwriteCustomMetadata` to `false` has no effect and request's customMetadata is set on the asset.
                customMetadata:
                  type: object
                  description: |
                    Stringified JSON key-value data to be associated with the asset. Checkout `overwriteCustomMetadata` parameter to understand default behaviour. Before setting any custom metadata on an asset you have to create the field using custom metadata fields API.
      responses:
        "200":
          description: File uploaded successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/uploadResponse"
components:
  schemas:
    customMetadataField:
      type: object
      required:
        - id
        - name
        - label
        - schema
      properties:
        id:
          type: string
          description: Unique identifier for the custom metadata field. Use this to update the field.
        name:
          type: string
          description: |
            API name of the custom metadata field. This becomes the key while setting `customMetadata` (key-value object) for an asset using upload or update API.
        label:
          type: string
          description: |
            Human readable name of the custom metadata field. This name is displayed as form field label to the users while setting field value on the asset in the media library UI.
        schema:
          type: object
          description: An object that describes the rules for the custom metadata field value.
          required:
            - type
          properties:
            type:
              description: Type of the custom metadata field.
              type: string
              enum:
                - Text
                - TextArea
                - Number
                - Date
                - Boolean
                - SingleSelect
                - MultiSelect
            selectOptions:
              type: array
              items: {}
              description: |
                An array of allowed values when field type is `SingleSelect` or `MultiSelect`.
              example:
                - small
                - medium
                - large
                - 30
                - 40
                - true
            defaultValue:
              description: |
                The default value for this custom metadata field. Date type of default value depends on the field type.
            isValueRequired:
              type: boolean
              description: |
                Specifies if the this custom metadata field is required or not.
            minValue:
              description: |
                Minimum value of the field. It is only set if field type is `Date` or `Number`. For `Date` type field, the value will be in ISO8601 string format. For `Number` type field, it will be a numeric value.
            maxValue:
              description: |
                Maximum value of the field. Only set this property if `type` is set to `Date` or `Number`. For `Date` type field, the value will be in ISO8601 string format. For `Number` type field, it will be a numeric value.
            minLength:
              description: |
                Minimum length of string. Only set this property if `type` is set to `Text` or `Textarea`.
              type: number
            maxLength:
              description: |
                Maximum length of string. Only set this property if `type` is set to `Text` or `Textarea`.
              type: number
    fileDetails:
      type: object
      properties:
        fileId:
          type: string
          description: Unique identifier of the asset.
        type:
          type: string
          description: Type of the asset.
        name:
          type: string
          description: Name of the asset.
        filePath:
          type: string
          description: |
            Path of the file. This is the path you would use in the URL to access the file. For example, if the file is at the root of the media library, the path will be `/file.jpg`. If the file is inside a folder named `images`, the path will be `/images/file.jpg`.
        tags:
          oneOf:
            - type: array
              items:
                type: string
            - nullable: true
          description: |
            An array of tags assigned to the file. Tags are used to search files in the media library.
        AITags:
          oneOf:
            - type: array
              items:
                type: object
                properties:
                  name:
                    type: string
                    description: Name of the tag.
                  confidence:
                    type: number
                    description: Confidence score of the tag.
                  source:
                    type: string
                    description: Source of the tag. Possible values are `google-auto-tagging` and `aws-auto-tagging`.
            - nullable: true
          description: |
            An array of tags assigned to the file by auto tagging.
        versionInfo:
          type: object
          properties:
            id:
              type: string
              description: Unique identifier of the file version.
            name:
              type: string
              description: Name of the file version.
          description: |
            An object with details of the file version.
        isPrivateFile:
          type: boolean
          description: |
            Specifies if the file is private or not.
        customCoordinates:
          oneOf:
            - type: string
            - nullable: true
          description: |
            An string with custom coordinates of the file.
        url:
          type: string
          description: |
            URL of the file.
        thumbnail:
          type: string
          description: |
            URL of the thumbnail image. This URL is used to access the thumbnail image of the file in the media library.
        fileType:
          type: string
          description: |
            Type of the file. Possible values are `image`, `non-image`.
        mime:
          type: string
          description: |
            MIME type of the file.
        width:
          type: number
          description: |
            Width of the file.
        height:
          type: number
          description: |
            Height of the file.
        size:
          type: number
          description: |
            Size of the file in bytes.
        hasAlpha:
          type: boolean
          description: |
            Specifies if the image has an alpha channel.
        customMetadata:
          type: object
          description: |
            An object with custom metadata for the file.
        createdAt:
          type: string
          description: |
            Date and time when the file was uploaded. The date and time is in ISO8601 format.
        updatedAt:
          type: string
          description: |
            Date and time when the file was last updated. The date and time is in ISO8601 format.
    uploadResponse:
      type: object
      properties:
        fileId:
          type: string
          description: Unique fileId. Store this fileld in your database, as this will be used to perform update action on this file.
        type:
          type: string
          description: Type of the asset.
        name:
          type: string
          description: Name of the asset.
        filePath:
          type: string
          description: The relative path of the file. In the case of an image, you can use this path to construct different transformations.
        tags:
          oneOf:
            - type: array
              items:
                type: string
            - nullable: true
          description: The array of tags associated with the image. If no tags are set, it will be `null`.
        AITags:
          oneOf:
            - type: array
              items:
                type: object
                properties:
                  name:
                    type: string
                    description: Name of the tag.
                  confidence:
                    type: number
                    description: Confidence score of the tag.
                  source:
                    type: string
                    description: Array of `AITags` associated with the image. If no `AITags` are set, it will be null. These tags can be added using the `google-auto-tagging` or `aws-auto-tagging` extensions.
            - nullable: true
          description: |
            An array of tags assigned to the uploaded file by auto tagging.
        versionInfo:
          type: object
          properties:
            id:
              type: string
              description: Unique identifier of the file version.
            name:
              type: string
              description: Name of the file version.
          description: |
            An object containing the file or file version's `id` (versionId) and `name`.
        isPrivateFile:
          type: boolean
          description: |
            Is the file marked as private. It can be either `true` or `false`.
        customCoordinates:
          oneOf:
            - type: string
            - nullable: true
          description: |
            Value of custom coordinates associated with the image in the format `x,y,width,height`. If `customCoordinates` are not defined, then it is `null`.
        url:
          type: string
          description: A publicly accessible URL of the file.
        thumbnail:
          type: string
          description: In the case of an image, a small thumbnail URL.
        fileType:
          type: string
          description: |
            Type of the uploaded file. Possible values are `image`, `non-image`.
        mime:
          type: string
          description: |
            MIME Type of the file.
          example: image/jpeg
        height:
          type: number
          description: Height of the image in pixels (Only for images)
        width:
          type: number
          description: Width of the image in pixels (Only for Images)
        size:
          type: number
          description: Size of the image file in Bytes.
        hasAlpha:
          type: boolean
          description: |
            A boolean indicating if the image has an alpha layer or not.
        customMetadata:
          type: object
          description: |
            A key-value data associated with the asset. Use `responseField` in API request to get `customMetadata` in the upload API response. Before setting any custom metadata on an asset, you have to create the field using custom metadata fields API.
        embeddedMetadata:
          type: object
          description: |
            Consolidated embedded metadata associated with the file. It includes `exif`, `iptc`, and `xmp` data. Use `responseField` in API request to get `embeddedMetadata` in the upload API response.
        createdAt:
          type: string
          description: |
            The date and time when the file was first uploaded. The format is YYYY-MM-DDTHH:mm:ss.sssZ
        updatedAt:
          type: string
          description: |
            The date and time when the file was first uploaded. The format is YYYY-MM-DDTHH:mm:ss.sssZ
        extensionStatus:
          type: object
          description: |
            Extension names with their processing status at the time of completion of the request. It could have one of the following status values:

            `success`: The extension has been successfully applied.
            `failed`: The extension has failed and will not be retried.
            `pending`: The extension will finish processing in some time. On completion, the final status (success / failed) will be sent to the `webhookUrl` provided.

            If no extension was requested, then this parameter is not returned.
          properties:
            google-auto-tagging:
              type: string
              enum: ["success", "pending", "failed"]
            aws-auto-tagging:
              type: string
              enum: ["success", "pending", "failed"]
            remove-bg:
              type: string
              enum: ["success", "pending", "failed"]
  examples: {}
  securitySchemes:
    basicAuth:
      description: >-
        Basic HTTP authentication. Allowed headers-- Authorization: Basic
        <private_key> | Authorization: Basic <base64 hash of `private_key:`>
      scheme: basic
      type: http
security:
  - basicAuth: []
